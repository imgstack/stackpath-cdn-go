// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustconfBandwidthRateLimit custconf bandwidth rate limit
//
// swagger:model custconfBandwidthRateLimit
type CustconfBandwidthRateLimit struct {

	// enabled
	Enabled bool `json:"enabled"`

	// String of values delimited by a ',' character.
	HeaderFilter string `json:"headerFilter,omitempty"`

	// This is used by the API to perform conflict checking
	ID string `json:"id,omitempty"`

	// initial burst name
	InitialBurstName string `json:"initialBurstName,omitempty"`

	// initial burst units
	InitialBurstUnits *BandwidthRateLimitInitialBurstUnitsEnumWrapperValue `json:"initialBurstUnits,omitempty"`

	// String of values delimited by a ',' character.
	MethodFilter string `json:"methodFilter,omitempty"`

	// String of values delimited by a ',' character.
	PathFilter string `json:"pathFilter,omitempty"`

	// sustained rate name
	SustainedRateName string `json:"sustainedRateName,omitempty"`

	// sustained rate units
	SustainedRateUnits *BandwidthRateLimitSustainedRateUnitsEnumWrapperValue `json:"sustainedRateUnits,omitempty"`
}

// Validate validates this custconf bandwidth rate limit
func (m *CustconfBandwidthRateLimit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitialBurstUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSustainedRateUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustconfBandwidthRateLimit) validateInitialBurstUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.InitialBurstUnits) { // not required
		return nil
	}

	if m.InitialBurstUnits != nil {
		if err := m.InitialBurstUnits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initialBurstUnits")
			}
			return err
		}
	}

	return nil
}

func (m *CustconfBandwidthRateLimit) validateSustainedRateUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.SustainedRateUnits) { // not required
		return nil
	}

	if m.SustainedRateUnits != nil {
		if err := m.SustainedRateUnits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sustainedRateUnits")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this custconf bandwidth rate limit based on the context it is used
func (m *CustconfBandwidthRateLimit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInitialBurstUnits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSustainedRateUnits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustconfBandwidthRateLimit) contextValidateInitialBurstUnits(ctx context.Context, formats strfmt.Registry) error {

	if m.InitialBurstUnits != nil {
		if err := m.InitialBurstUnits.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initialBurstUnits")
			}
			return err
		}
	}

	return nil
}

func (m *CustconfBandwidthRateLimit) contextValidateSustainedRateUnits(ctx context.Context, formats strfmt.Registry) error {

	if m.SustainedRateUnits != nil {
		if err := m.SustainedRateUnits.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sustainedRateUnits")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustconfBandwidthRateLimit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustconfBandwidthRateLimit) UnmarshalBinary(b []byte) error {
	var res CustconfBandwidthRateLimit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
