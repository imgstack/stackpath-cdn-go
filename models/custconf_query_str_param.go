// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustconfQueryStrParam The reserved query string parameters policy describes all the query string parameters the StackPath CDN caching server reserves for special processing of your requests.
//
// swagger:model custconfQueryStrParam
type CustconfQueryStrParam struct {

	// This is the name of the query string parameter which contains the name of the file to specify in the Content-Disposition HTTP response header. This setting is typically used by customers to configure a "friendly name" for URLs that have obfuscated file names. This setting controls the "filename" directive that is part of the Content-Disposition HTTP header.
	DispositionName string `json:"dispositionName,omitempty"`

	// This setting allows you to completely override the Content-Disposition HTTP header that the CDN caching servers use on a response.
	DispositionOverride string `json:"dispositionOverride,omitempty"`

	// This is the name of the query string parameter which contains the disposition type to use in the Content-Disposition HTTP header. Typically, this value is set to "attachment," but you may supply a custom string using this setting.
	DispositionType string `json:"dispositionType,omitempty"`

	// enabled
	Enabled bool `json:"enabled"`

	// This is used by the API to perform conflict checking
	ID string `json:"id,omitempty"`

	// This is the  name of the query string parameter that indicates to the CDN the initial bytes of a video that should be returned before sending the requested byte offset. This parameter is part of the jump-to-byte feature that is initiated on a per request basis.
	JumpToByteInitialBytes string `json:"jumpToByteInitialBytes,omitempty"`

	// This is the name of the query string parameter that indicates to the CDN the specific offset into the video that is being requested. This parameter is part of the jump-to-byte feature that is initiated on a per request basis.
	JumpToByteStartOffset string `json:"jumpToByteStartOffset,omitempty"`

	// This is the name of the query string parameter that indicates to the CDN the end time offset of the video that should be returned. This parameter is part of the jump-to-time feature that is initiated on a per request basis.
	JumpToTimeEnd string `json:"jumpToTimeEnd,omitempty"`

	// This is the name of the query string parameter that indicates to the CDN the start time offset of the video returned. This parameter is part of the jump-to-time feature that is initiated on a per request basis.
	JumpToTimeStart string `json:"jumpToTimeStart,omitempty"`

	// This is the name of the query string parameter that indicates to the CDN an initial burst rate to use when delivering a file. This parameter is part of the bandwidth limiting feature that is initiated on a per request basis.
	RateLimitInitial string `json:"rateLimitInitial,omitempty"`

	// This is the name of the query string parameter that indicates to the CDN the sustained rate being requested for the delivery of a file. This parameter is part of the bandwidth throttling feature that is initiated on a per request basis.
	RateLimitSustained string `json:"rateLimitSustained,omitempty"`
}

// Validate validates this custconf query str param
func (m *CustconfQueryStrParam) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this custconf query str param based on context it is used
func (m *CustconfQueryStrParam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustconfQueryStrParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustconfQueryStrParam) UnmarshalBinary(b []byte) error {
	var res CustconfQueryStrParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
