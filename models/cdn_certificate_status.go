// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CdnCertificateStatus A StackPath-provided certificate's status
//
// - UNKNOWN: StackPath is unable to determine the certificate's status. This is the default status for end-user provided certificates.
//  - PENDING: The certificate is provisioning
//  - EXPIRED: The certificate has expired
//  - FAILED: The certificate failed to provision
//  - PENDING_VERIFICATION: The certificate is pending domain verification by the end user
//  - ACTIVE: The certificate is valid and is in use by one or more hosts
//  - INACTIVE: The certificate is valid but is not in use by any hosts
//
// swagger:model cdnCertificateStatus
type CdnCertificateStatus string

const (

	// CdnCertificateStatusUNKNOWN captures enum value "UNKNOWN"
	CdnCertificateStatusUNKNOWN CdnCertificateStatus = "UNKNOWN"

	// CdnCertificateStatusPENDING captures enum value "PENDING"
	CdnCertificateStatusPENDING CdnCertificateStatus = "PENDING"

	// CdnCertificateStatusEXPIRED captures enum value "EXPIRED"
	CdnCertificateStatusEXPIRED CdnCertificateStatus = "EXPIRED"

	// CdnCertificateStatusFAILED captures enum value "FAILED"
	CdnCertificateStatusFAILED CdnCertificateStatus = "FAILED"

	// CdnCertificateStatusPENDINGVERIFICATION captures enum value "PENDING_VERIFICATION"
	CdnCertificateStatusPENDINGVERIFICATION CdnCertificateStatus = "PENDING_VERIFICATION"

	// CdnCertificateStatusACTIVE captures enum value "ACTIVE"
	CdnCertificateStatusACTIVE CdnCertificateStatus = "ACTIVE"

	// CdnCertificateStatusINACTIVE captures enum value "INACTIVE"
	CdnCertificateStatusINACTIVE CdnCertificateStatus = "INACTIVE"
)

// for schema
var cdnCertificateStatusEnum []interface{}

func init() {
	var res []CdnCertificateStatus
	if err := json.Unmarshal([]byte(`["UNKNOWN","PENDING","EXPIRED","FAILED","PENDING_VERIFICATION","ACTIVE","INACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cdnCertificateStatusEnum = append(cdnCertificateStatusEnum, v)
	}
}

func (m CdnCertificateStatus) validateCdnCertificateStatusEnum(path, location string, value CdnCertificateStatus) error {
	if err := validate.EnumCase(path, location, value, cdnCertificateStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cdn certificate status
func (m CdnCertificateStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCdnCertificateStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cdn certificate status based on context it is used
func (m CdnCertificateStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
