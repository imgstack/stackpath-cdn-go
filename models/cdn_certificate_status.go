// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// CdnCertificateStatus  - UNKNOWN: UNKNOWN is the default value if no other value has been defined.
//  - PENDING: PENDING is the initial value that a certificate request is created in before provisioning.
//  - EXPIRED: EXPIRED is for a certificate that has exceeded its expiration date.
//  - FAILED: FAILED is used for requested certificates that have had an error during provisioning.
//  - PENDING_VERIFICATION: PENDING_VERIFICATION is used during a certificate request where verification of ownership of the requested domains is still pending.
//  - ACTIVE: ACTIVE is for a certificate that is currently valid and in use by one or more hosts.
//  - INACTIVE: INACTIVE is for a certificate that is currently valid but not in use by any hosts.
// swagger:model cdnCertificateStatus
type CdnCertificateStatus string

const (

	// CdnCertificateStatusUNKNOWN captures enum value "UNKNOWN"
	CdnCertificateStatusUNKNOWN CdnCertificateStatus = "UNKNOWN"

	// CdnCertificateStatusPENDING captures enum value "PENDING"
	CdnCertificateStatusPENDING CdnCertificateStatus = "PENDING"

	// CdnCertificateStatusEXPIRED captures enum value "EXPIRED"
	CdnCertificateStatusEXPIRED CdnCertificateStatus = "EXPIRED"

	// CdnCertificateStatusFAILED captures enum value "FAILED"
	CdnCertificateStatusFAILED CdnCertificateStatus = "FAILED"

	// CdnCertificateStatusPENDINGVERIFICATION captures enum value "PENDING_VERIFICATION"
	CdnCertificateStatusPENDINGVERIFICATION CdnCertificateStatus = "PENDING_VERIFICATION"

	// CdnCertificateStatusACTIVE captures enum value "ACTIVE"
	CdnCertificateStatusACTIVE CdnCertificateStatus = "ACTIVE"

	// CdnCertificateStatusINACTIVE captures enum value "INACTIVE"
	CdnCertificateStatusINACTIVE CdnCertificateStatus = "INACTIVE"
)

// for schema
var cdnCertificateStatusEnum []interface{}

func init() {
	var res []CdnCertificateStatus
	if err := json.Unmarshal([]byte(`["UNKNOWN","PENDING","EXPIRED","FAILED","PENDING_VERIFICATION","ACTIVE","INACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cdnCertificateStatusEnum = append(cdnCertificateStatusEnum, v)
	}
}

func (m CdnCertificateStatus) validateCdnCertificateStatusEnum(path, location string, value CdnCertificateStatus) error {
	if err := validate.Enum(path, location, value, cdnCertificateStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this cdn certificate status
func (m CdnCertificateStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCdnCertificateStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
