// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CustconfMidTierCaching Mid Tier Caching Configuration
// swagger:model custconfMidTierCaching
type CustconfMidTierCaching struct {

	// enabled
	Enabled bool `json:"enabled"`

	// This is used by the API to perform conflict checking.
	ID string `json:"id,omitempty"`

	// String of values deliminated by a ',' character.
	PopFilter string `json:"popFilter,omitempty"`

	// protocol
	Protocol CustconfMidTierCachingProtocolEnumWrapperValue `json:"protocol,omitempty"`

	// String of values deliminated by a ',' character.
	RegionFilter string `json:"regionFilter,omitempty"`

	// request format
	RequestFormat MidTierCachingRequestFormatEnumWrapperValue `json:"requestFormat,omitempty"`

	// server and port
	ServerAndPort string `json:"serverAndPort,omitempty"`
}

// Validate validates this custconf mid tier caching
func (m *CustconfMidTierCaching) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestFormat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustconfMidTierCaching) validateProtocol(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	if err := m.Protocol.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("protocol")
		}
		return err
	}

	return nil
}

func (m *CustconfMidTierCaching) validateRequestFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestFormat) { // not required
		return nil
	}

	if err := m.RequestFormat.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requestFormat")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustconfMidTierCaching) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustconfMidTierCaching) UnmarshalBinary(b []byte) error {
	var res CustconfMidTierCaching
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
