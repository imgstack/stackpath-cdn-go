// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// AuthACLClientIPSrcEnumWrapperValue auth ACL client IP src enum wrapper value
// swagger:model AuthACLClientIPSrcEnumWrapperValue
type AuthACLClientIPSrcEnumWrapperValue string

const (

	// AuthACLClientIPSrcEnumWrapperValueUNKNOWN captures enum value "UNKNOWN"
	AuthACLClientIPSrcEnumWrapperValueUNKNOWN AuthACLClientIPSrcEnumWrapperValue = "UNKNOWN"

	// AuthACLClientIPSrcEnumWrapperValueSocket captures enum value "socket"
	AuthACLClientIPSrcEnumWrapperValueSocket AuthACLClientIPSrcEnumWrapperValue = "socket"

	// AuthACLClientIPSrcEnumWrapperValueHeader captures enum value "header"
	AuthACLClientIPSrcEnumWrapperValueHeader AuthACLClientIPSrcEnumWrapperValue = "header"
)

// for schema
var authAclClientIpSrcEnumWrapperValueEnum []interface{}

func init() {
	var res []AuthACLClientIPSrcEnumWrapperValue
	if err := json.Unmarshal([]byte(`["UNKNOWN","socket","header"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authAclClientIpSrcEnumWrapperValueEnum = append(authAclClientIpSrcEnumWrapperValueEnum, v)
	}
}

func (m AuthACLClientIPSrcEnumWrapperValue) validateAuthACLClientIPSrcEnumWrapperValueEnum(path, location string, value AuthACLClientIPSrcEnumWrapperValue) error {
	if err := validate.Enum(path, location, value, authAclClientIpSrcEnumWrapperValueEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this auth ACL client IP src enum wrapper value
func (m AuthACLClientIPSrcEnumWrapperValue) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuthACLClientIPSrcEnumWrapperValueEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
