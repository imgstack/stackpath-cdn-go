// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// CustconfScriptNegCaching The legacy negative response code caching policy allowed the CDN to cache the
// body of non-200 responses.  This policy is no longer required now that the
// CDN supports the caching of all response codes from an origin.  Please
// consider removing this policy and configuring this behavior using a CDN
// Caching policy.
// swagger:model custconfScriptNegCaching
type CustconfScriptNegCaching struct {

	// enabled
	Enabled bool `json:"enabled"`

	// This is used by the API to perform conflict checking.
	ID string `json:"id,omitempty"`

	// String of values deliminated by a '|' character. Pipe delimited ('|') list
	// of headers to overwrite or insert in the origin response prior to the
	// processing it on the caching server
	OriginHeaderOverride string `json:"originHeaderOverride,omitempty"`

	// String of values deliminated by a ',' character. This is a comma separated
	// list of negative HTTP response codes to cache.  Wildcards, such as 4**, are
	// supported to represent all 400 level status codes.
	StatusCodes string `json:"statusCodes,omitempty"`
}

// Validate validates this custconf script neg caching
func (m *CustconfScriptNegCaching) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustconfScriptNegCaching) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustconfScriptNegCaching) UnmarshalBinary(b []byte) error {
	var res CustconfScriptNegCaching
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
