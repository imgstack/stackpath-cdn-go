// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// CustconfAuthURLSignLMV The Limelight Networks URL signing policy allows you to create a signed URL
// that implements the same signing method used by Limelight Networks;
// therefore, published URLs from a Limelight CDN network can be transitioned to
// the Highwinds network without you having to change your URLs (or the signing
// process).
// swagger:model custconfAuthUrlSignLMV
type CustconfAuthURLSignLMV struct {

	// enabled
	Enabled bool `json:"enabled"`

	// end time field name
	EndTimeFieldName string `json:"endTimeFieldName,omitempty"`

	// String of values deliminated by a ',' character.
	HeaderFilter string `json:"headerFilter,omitempty"`

	// This is used by the API to perform conflict checking.
	ID string `json:"id,omitempty"`

	// ip field name
	IPFieldName string `json:"ipFieldName,omitempty"`

	// length field name
	LengthFieldName string `json:"lengthFieldName,omitempty"`

	// String of values deliminated by a ',' character.
	MethodFilter string `json:"methodFilter,omitempty"`

	// parameter match patterns
	ParameterMatchPatterns string `json:"parameterMatchPatterns,omitempty"`

	// String of values deliminated by a ',' character.
	PathFilter string `json:"pathFilter,omitempty"`

	// ri field name
	RiFieldName string `json:"riFieldName,omitempty"`

	// rs field name
	RsFieldName string `json:"rsFieldName,omitempty"`

	// This is the shared secret used to sign the URL.  This value should only be
	// known by Highwinds and by personnel authorized to sign your content.
	Secret string `json:"secret,omitempty"`

	// start time field name
	StartTimeFieldName string `json:"startTimeFieldName,omitempty"`

	// token field name
	TokenFieldName string `json:"tokenFieldName,omitempty"`
}

// Validate validates this custconf auth Url sign l m v
func (m *CustconfAuthURLSignLMV) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustconfAuthURLSignLMV) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustconfAuthURLSignLMV) UnmarshalBinary(b []byte) error {
	var res CustconfAuthURLSignLMV
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
