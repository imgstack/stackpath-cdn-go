// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CustconfAuthACLProtocolEnumWrapperValue custconf auth ACL protocol enum wrapper value
//
// swagger:model custconfAuthACLProtocolEnumWrapperValue
type CustconfAuthACLProtocolEnumWrapperValue string

const (

	// CustconfAuthACLProtocolEnumWrapperValueUNKNOWN captures enum value "UNKNOWN"
	CustconfAuthACLProtocolEnumWrapperValueUNKNOWN CustconfAuthACLProtocolEnumWrapperValue = "UNKNOWN"

	// CustconfAuthACLProtocolEnumWrapperValueHTTP captures enum value "http"
	CustconfAuthACLProtocolEnumWrapperValueHTTP CustconfAuthACLProtocolEnumWrapperValue = "http"

	// CustconfAuthACLProtocolEnumWrapperValueHTTPS captures enum value "https"
	CustconfAuthACLProtocolEnumWrapperValueHTTPS CustconfAuthACLProtocolEnumWrapperValue = "https"

	// CustconfAuthACLProtocolEnumWrapperValueBoth captures enum value "both"
	CustconfAuthACLProtocolEnumWrapperValueBoth CustconfAuthACLProtocolEnumWrapperValue = "both"
)

// for schema
var custconfAuthAclProtocolEnumWrapperValueEnum []interface{}

func init() {
	var res []CustconfAuthACLProtocolEnumWrapperValue
	if err := json.Unmarshal([]byte(`["UNKNOWN","http","https","both"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		custconfAuthAclProtocolEnumWrapperValueEnum = append(custconfAuthAclProtocolEnumWrapperValueEnum, v)
	}
}

func (m CustconfAuthACLProtocolEnumWrapperValue) validateCustconfAuthACLProtocolEnumWrapperValueEnum(path, location string, value CustconfAuthACLProtocolEnumWrapperValue) error {
	if err := validate.EnumCase(path, location, value, custconfAuthAclProtocolEnumWrapperValueEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this custconf auth ACL protocol enum wrapper value
func (m CustconfAuthACLProtocolEnumWrapperValue) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCustconfAuthACLProtocolEnumWrapperValueEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this custconf auth ACL protocol enum wrapper value based on context it is used
func (m CustconfAuthACLProtocolEnumWrapperValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
