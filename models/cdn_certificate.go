// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CdnCertificate An SSL certificate
// swagger:model cdnCertificate
type CdnCertificate struct {

	// A PEM PKCS #7 formatted certificate authority bundle
	CaBundle string `json:"caBundle,omitempty"`

	// A certificate's common name, or the primary domain name the certificate is used for
	CommonName string `json:"commonName,omitempty"`

	// The date an SSL certificate was created
	// Format: date-time
	CreateDate strfmt.DateTime `json:"createDate,omitempty"`

	// The date an SSL certificate will expire
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"expirationDate,omitempty"`

	// A unique hash of a certificate's contents
	Fingerprint string `json:"fingerprint,omitempty"`

	// A certificate's unique ID
	ID string `json:"id,omitempty"`

	// The name of the certificate's issuing certificate authority
	Issuer string `json:"issuer,omitempty"`

	// Whether a certificate is managed by StackPath or the end user
	ProviderManaged bool `json:"providerManaged"`

	// status
	Status CdnCertificateStatus `json:"status,omitempty"`

	// A list of Subject Alternative Names in the certificate
	//
	// Certificates for multiple domains define their domains in certificate's SAN list.
	SubjectAlternativeNames []string `json:"subjectAlternativeNames,omitempty"`

	// Whether or not the certificate's authority is trusted by a web browser
	Trusted bool `json:"trusted"`

	// The date an SSL certificate was last updated
	// Format: date-time
	UpdateDate strfmt.DateTime `json:"updateDate,omitempty"`
}

// Validate validates this cdn certificate
func (m *CdnCertificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdnCertificate) validateCreateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("createDate", "body", "date-time", m.CreateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CdnCertificate) validateExpirationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CdnCertificate) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *CdnCertificate) validateUpdateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdateDate) { // not required
		return nil
	}

	if err := validate.FormatOf("updateDate", "body", "date-time", m.UpdateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdnCertificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdnCertificate) UnmarshalBinary(b []byte) error {
	var res CdnCertificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
