// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CustconfClientResponseQueue The script engine client response queue policy allows you to register a PHP
// script to execute on the CDN caching server prior to the server returning a
// response to a client.  Scripts defined in this queue can modify, add and/or
// delete HTTP headers in the CDN repsonse.
// swagger:model custconfClientResponseQueue
type CustconfClientResponseQueue struct {

	// enabled
	Enabled bool `json:"enabled"`

	// String of values deliminated by a ',' character.
	HeaderFilter string `json:"headerFilter,omitempty"`

	// This is used by the API to perform conflict checking.
	ID string `json:"id,omitempty"`

	// log level
	LogLevel CustconfClientResponseQueueLogLevelEnumWrapperValue `json:"logLevel,omitempty"`

	// String of values deliminated by a ',' character.
	MethodFilter string `json:"methodFilter,omitempty"`

	// String of values deliminated by a ',' character.
	PathFilter string `json:"pathFilter,omitempty"`

	// This value instructs the CDN to terminate the processing of the request on
	// all script failures.
	QuitOnError bool `json:"quitOnError"`

	// This is the path of the script on the CDN caching server.
	ScriptPath string `json:"scriptPath,omitempty"`
}

// Validate validates this custconf client response queue
func (m *CustconfClientResponseQueue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustconfClientResponseQueue) validateLogLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.LogLevel) { // not required
		return nil
	}

	if err := m.LogLevel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("logLevel")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustconfClientResponseQueue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustconfClientResponseQueue) UnmarshalBinary(b []byte) error {
	var res CustconfClientResponseQueue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
