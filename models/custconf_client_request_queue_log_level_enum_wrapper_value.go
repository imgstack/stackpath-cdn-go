// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CustconfClientRequestQueueLogLevelEnumWrapperValue custconf client request queue log level enum wrapper value
//
// swagger:model custconfClientRequestQueueLogLevelEnumWrapperValue
type CustconfClientRequestQueueLogLevelEnumWrapperValue string

const (

	// CustconfClientRequestQueueLogLevelEnumWrapperValueUNKNOWN captures enum value "UNKNOWN"
	CustconfClientRequestQueueLogLevelEnumWrapperValueUNKNOWN CustconfClientRequestQueueLogLevelEnumWrapperValue = "UNKNOWN"

	// CustconfClientRequestQueueLogLevelEnumWrapperValueDebug captures enum value "debug"
	CustconfClientRequestQueueLogLevelEnumWrapperValueDebug CustconfClientRequestQueueLogLevelEnumWrapperValue = "debug"

	// CustconfClientRequestQueueLogLevelEnumWrapperValueInfo captures enum value "info"
	CustconfClientRequestQueueLogLevelEnumWrapperValueInfo CustconfClientRequestQueueLogLevelEnumWrapperValue = "info"

	// CustconfClientRequestQueueLogLevelEnumWrapperValueWarning captures enum value "warning"
	CustconfClientRequestQueueLogLevelEnumWrapperValueWarning CustconfClientRequestQueueLogLevelEnumWrapperValue = "warning"

	// CustconfClientRequestQueueLogLevelEnumWrapperValueError captures enum value "error"
	CustconfClientRequestQueueLogLevelEnumWrapperValueError CustconfClientRequestQueueLogLevelEnumWrapperValue = "error"

	// CustconfClientRequestQueueLogLevelEnumWrapperValueCrit captures enum value "crit"
	CustconfClientRequestQueueLogLevelEnumWrapperValueCrit CustconfClientRequestQueueLogLevelEnumWrapperValue = "crit"
)

// for schema
var custconfClientRequestQueueLogLevelEnumWrapperValueEnum []interface{}

func init() {
	var res []CustconfClientRequestQueueLogLevelEnumWrapperValue
	if err := json.Unmarshal([]byte(`["UNKNOWN","debug","info","warning","error","crit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		custconfClientRequestQueueLogLevelEnumWrapperValueEnum = append(custconfClientRequestQueueLogLevelEnumWrapperValueEnum, v)
	}
}

func (m CustconfClientRequestQueueLogLevelEnumWrapperValue) validateCustconfClientRequestQueueLogLevelEnumWrapperValueEnum(path, location string, value CustconfClientRequestQueueLogLevelEnumWrapperValue) error {
	if err := validate.EnumCase(path, location, value, custconfClientRequestQueueLogLevelEnumWrapperValueEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this custconf client request queue log level enum wrapper value
func (m CustconfClientRequestQueueLogLevelEnumWrapperValue) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCustconfClientRequestQueueLogLevelEnumWrapperValueEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this custconf client request queue log level enum wrapper value based on context it is used
func (m CustconfClientRequestQueueLogLevelEnumWrapperValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
