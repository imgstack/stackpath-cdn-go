// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CustconfOriginPullProtocolProtocolEnumWrapperValue custconf origin pull protocol protocol enum wrapper value
//
// swagger:model custconfOriginPullProtocolProtocolEnumWrapperValue
type CustconfOriginPullProtocolProtocolEnumWrapperValue string

const (

	// CustconfOriginPullProtocolProtocolEnumWrapperValueUNKNOWN captures enum value "UNKNOWN"
	CustconfOriginPullProtocolProtocolEnumWrapperValueUNKNOWN CustconfOriginPullProtocolProtocolEnumWrapperValue = "UNKNOWN"

	// CustconfOriginPullProtocolProtocolEnumWrapperValueHTTP captures enum value "http"
	CustconfOriginPullProtocolProtocolEnumWrapperValueHTTP CustconfOriginPullProtocolProtocolEnumWrapperValue = "http"

	// CustconfOriginPullProtocolProtocolEnumWrapperValueHTTPS captures enum value "https"
	CustconfOriginPullProtocolProtocolEnumWrapperValueHTTPS CustconfOriginPullProtocolProtocolEnumWrapperValue = "https"

	// CustconfOriginPullProtocolProtocolEnumWrapperValueMatch captures enum value "match"
	CustconfOriginPullProtocolProtocolEnumWrapperValueMatch CustconfOriginPullProtocolProtocolEnumWrapperValue = "match"
)

// for schema
var custconfOriginPullProtocolProtocolEnumWrapperValueEnum []interface{}

func init() {
	var res []CustconfOriginPullProtocolProtocolEnumWrapperValue
	if err := json.Unmarshal([]byte(`["UNKNOWN","http","https","match"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		custconfOriginPullProtocolProtocolEnumWrapperValueEnum = append(custconfOriginPullProtocolProtocolEnumWrapperValueEnum, v)
	}
}

func (m CustconfOriginPullProtocolProtocolEnumWrapperValue) validateCustconfOriginPullProtocolProtocolEnumWrapperValueEnum(path, location string, value CustconfOriginPullProtocolProtocolEnumWrapperValue) error {
	if err := validate.EnumCase(path, location, value, custconfOriginPullProtocolProtocolEnumWrapperValueEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this custconf origin pull protocol protocol enum wrapper value
func (m CustconfOriginPullProtocolProtocolEnumWrapperValue) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCustconfOriginPullProtocolProtocolEnumWrapperValueEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this custconf origin pull protocol protocol enum wrapper value based on context it is used
func (m CustconfOriginPullProtocolProtocolEnumWrapperValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
