// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustconfOriginPull The origin pull settings policy contains a list of settings that control the behavior of origin pull requests.
//
// swagger:model custconfOriginPull
type CustconfOriginPull struct {

	// enabled
	Enabled bool `json:"enabled"`

	// This is used by the API to perform conflict checking
	ID string `json:"id,omitempty"`

	// GFS sends a path without any query string parameters when making external origin requests regardless if any parameters were sent by the User-Agent.
	NoQSParams bool `json:"noQSParams"`

	// redirect action
	RedirectAction *OriginPullRedirectActionEnumWrapperValue `json:"redirectAction,omitempty"`

	// String of values delimited by a ',' character. List of HTTP Methods that define types of origin pull requests that can be retried if a failure occurs after sending a previous request.
	RetryMethods string `json:"retryMethods,omitempty"`
}

// Validate validates this custconf origin pull
func (m *CustconfOriginPull) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRedirectAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustconfOriginPull) validateRedirectAction(formats strfmt.Registry) error {
	if swag.IsZero(m.RedirectAction) { // not required
		return nil
	}

	if m.RedirectAction != nil {
		if err := m.RedirectAction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redirectAction")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this custconf origin pull based on the context it is used
func (m *CustconfOriginPull) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRedirectAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustconfOriginPull) contextValidateRedirectAction(ctx context.Context, formats strfmt.Registry) error {

	if m.RedirectAction != nil {
		if err := m.RedirectAction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redirectAction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustconfOriginPull) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustconfOriginPull) UnmarshalBinary(b []byte) error {
	var res CustconfOriginPull
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
