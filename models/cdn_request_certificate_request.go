// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CdnRequestCertificateRequest A request to provision an SSL certificate for a CDN site
//
// swagger:model cdnRequestCertificateRequest
type CdnRequestCertificateRequest struct {

	// An optional list of delivery domains that will be included as subject alternative names on the certificate
	//
	// If no hosts are provided, all delivery domains on the site will be included with the first one in the list being used as the common name.  If hosts are provided, the first entry will be used as the common name.
	//
	// All entries in the list are validated against the existing delivery domains for the provided site.
	Hosts []string `json:"hosts,omitempty"`

	// verification method
	// Enum: [DNS HTTP]
	VerificationMethod string `json:"verificationMethod,omitempty"`
}

// Validate validates this cdn request certificate request
func (m *CdnRequestCertificateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVerificationMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cdnRequestCertificateRequestTypeVerificationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DNS","HTTP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cdnRequestCertificateRequestTypeVerificationMethodPropEnum = append(cdnRequestCertificateRequestTypeVerificationMethodPropEnum, v)
	}
}

const (

	// CdnRequestCertificateRequestVerificationMethodDNS captures enum value "DNS"
	CdnRequestCertificateRequestVerificationMethodDNS string = "DNS"

	// CdnRequestCertificateRequestVerificationMethodHTTP captures enum value "HTTP"
	CdnRequestCertificateRequestVerificationMethodHTTP string = "HTTP"
)

// prop value enum
func (m *CdnRequestCertificateRequest) validateVerificationMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cdnRequestCertificateRequestTypeVerificationMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CdnRequestCertificateRequest) validateVerificationMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.VerificationMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateVerificationMethodEnum("verificationMethod", "body", m.VerificationMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cdn request certificate request based on context it is used
func (m *CdnRequestCertificateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CdnRequestCertificateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdnRequestCertificateRequest) UnmarshalBinary(b []byte) error {
	var res CdnRequestCertificateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
