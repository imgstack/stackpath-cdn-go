// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CustconfOriginResponseQueueLogLevelEnumWrapperValue custconf origin response queue log level enum wrapper value
//
// swagger:model custconfOriginResponseQueueLogLevelEnumWrapperValue
type CustconfOriginResponseQueueLogLevelEnumWrapperValue string

const (

	// CustconfOriginResponseQueueLogLevelEnumWrapperValueUNKNOWN captures enum value "UNKNOWN"
	CustconfOriginResponseQueueLogLevelEnumWrapperValueUNKNOWN CustconfOriginResponseQueueLogLevelEnumWrapperValue = "UNKNOWN"

	// CustconfOriginResponseQueueLogLevelEnumWrapperValueDebug captures enum value "debug"
	CustconfOriginResponseQueueLogLevelEnumWrapperValueDebug CustconfOriginResponseQueueLogLevelEnumWrapperValue = "debug"

	// CustconfOriginResponseQueueLogLevelEnumWrapperValueInfo captures enum value "info"
	CustconfOriginResponseQueueLogLevelEnumWrapperValueInfo CustconfOriginResponseQueueLogLevelEnumWrapperValue = "info"

	// CustconfOriginResponseQueueLogLevelEnumWrapperValueWarning captures enum value "warning"
	CustconfOriginResponseQueueLogLevelEnumWrapperValueWarning CustconfOriginResponseQueueLogLevelEnumWrapperValue = "warning"

	// CustconfOriginResponseQueueLogLevelEnumWrapperValueError captures enum value "error"
	CustconfOriginResponseQueueLogLevelEnumWrapperValueError CustconfOriginResponseQueueLogLevelEnumWrapperValue = "error"

	// CustconfOriginResponseQueueLogLevelEnumWrapperValueCrit captures enum value "crit"
	CustconfOriginResponseQueueLogLevelEnumWrapperValueCrit CustconfOriginResponseQueueLogLevelEnumWrapperValue = "crit"
)

// for schema
var custconfOriginResponseQueueLogLevelEnumWrapperValueEnum []interface{}

func init() {
	var res []CustconfOriginResponseQueueLogLevelEnumWrapperValue
	if err := json.Unmarshal([]byte(`["UNKNOWN","debug","info","warning","error","crit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		custconfOriginResponseQueueLogLevelEnumWrapperValueEnum = append(custconfOriginResponseQueueLogLevelEnumWrapperValueEnum, v)
	}
}

func (m CustconfOriginResponseQueueLogLevelEnumWrapperValue) validateCustconfOriginResponseQueueLogLevelEnumWrapperValueEnum(path, location string, value CustconfOriginResponseQueueLogLevelEnumWrapperValue) error {
	if err := validate.EnumCase(path, location, value, custconfOriginResponseQueueLogLevelEnumWrapperValueEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this custconf origin response queue log level enum wrapper value
func (m CustconfOriginResponseQueueLogLevelEnumWrapperValue) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCustconfOriginResponseQueueLogLevelEnumWrapperValueEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this custconf origin response queue log level enum wrapper value based on context it is used
func (m CustconfOriginResponseQueueLogLevelEnumWrapperValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
