// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// CustconfConsistentHashing The consistent hashing policy allows you to customize the consistent hashing
// algorithm used by Doppler.
// swagger:model custconfConsistentHashing
type CustconfConsistentHashing struct {

	// The number of additional hosts you would like Doppler to use when selecting
	// a host for content.  The additional hosts will be evenly load balanced by
	// Doppler and will cause content to be duplicated for the customer on each
	// server.  The value (0 to 65535) entered in this field will be limited to
	// the number of hosts available in the data center. The value 'all' can be
	// used to spread a file across all hosts in the data center.
	DefaultLoadBalanceHosts string `json:"defaultLoadBalanceHosts,omitempty"`

	// enable sideway pulling
	EnableSidewayPulling bool `json:"enableSidewayPulling,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// String of values deliminated by a ',' character.
	HeaderFilter string `json:"headerFilter,omitempty"`

	// This is used by the API to perform conflict checking.
	ID string `json:"id,omitempty"`

	// String of values deliminated by a ',' character.
	MethodFilter string `json:"methodFilter,omitempty"`

	// String of values deliminated by a ',' character.
	PathFilter string `json:"pathFilter,omitempty"`

	// String of values deliminated by a ',' character.
	PopFilter string `json:"popFilter,omitempty"`

	// String of values deliminated by a ',' character.
	RegionFilter string `json:"regionFilter,omitempty"`
}

// Validate validates this custconf consistent hashing
func (m *CustconfConsistentHashing) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustconfConsistentHashing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustconfConsistentHashing) UnmarshalBinary(b []byte) error {
	var res CustconfConsistentHashing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
