// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SiteTypeValue A CDN site's type
//
// A site's type determines how StackPath delivers content to incoming HTTP(S) requests.
//
//  - UNKNOWN: StackPath is unable to determine a site's type
//  - CDN: A site is CDN only site
//  - WAF: A site is either a standalone WAF site or a WAF site with attached CDN service
//  - API: A site is an API delivery site. API delivery sites are powered by both the WAF and CDN and have custom rulesets for each.
//
// swagger:model SiteTypeValue
type SiteTypeValue string

const (

	// SiteTypeValueUNKNOWN captures enum value "UNKNOWN"
	SiteTypeValueUNKNOWN SiteTypeValue = "UNKNOWN"

	// SiteTypeValueCDN captures enum value "CDN"
	SiteTypeValueCDN SiteTypeValue = "CDN"

	// SiteTypeValueWAF captures enum value "WAF"
	SiteTypeValueWAF SiteTypeValue = "WAF"

	// SiteTypeValueAPI captures enum value "API"
	SiteTypeValueAPI SiteTypeValue = "API"
)

// for schema
var siteTypeValueEnum []interface{}

func init() {
	var res []SiteTypeValue
	if err := json.Unmarshal([]byte(`["UNKNOWN","CDN","WAF","API"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		siteTypeValueEnum = append(siteTypeValueEnum, v)
	}
}

func (m SiteTypeValue) validateSiteTypeValueEnum(path, location string, value SiteTypeValue) error {
	if err := validate.EnumCase(path, location, value, siteTypeValueEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this site type value
func (m SiteTypeValue) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSiteTypeValueEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this site type value based on context it is used
func (m SiteTypeValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
