// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CdnSiteScript An EdgeEngine script
//
// EdgeEngine scripts are hosted and executed on StackPath's edge nodes.
// swagger:model cdnSiteScript
type CdnSiteScript struct {

	// The contents of an EdgeEngine script
	// Format: byte
	Code strfmt.Base64 `json:"code,omitempty"`

	// The date an EdgeEngine script was created
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// An EdgeEngine script's unique identifier
	ID string `json:"id,omitempty"`

	// An EdgeEngine script's name
	Name string `json:"name,omitempty"`

	// The URL paths that incoming requests should answer with an EdgeEngine script
	//
	// Every EdgeEngine script needs at least one path, and paths must be unique.
	Paths []string `json:"paths"`

	// The ID of the site to which an EdgeEngine script belongs
	SiteID string `json:"siteId,omitempty"`

	// The ID of the stack to which an EdgeEngine script's site belongs
	StackID string `json:"stackId,omitempty"`

	// The date an EdgeEngine script was last updated
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// An EdgeEngine script's version number
	//
	// Version numbers start at 1 and are incremented every time the script is updated.
	Version string `json:"version,omitempty"`
}

// Validate validates this cdn site script
func (m *CdnSiteScript) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CdnSiteScript) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(m.Code) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *CdnSiteScript) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CdnSiteScript) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CdnSiteScript) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CdnSiteScript) UnmarshalBinary(b []byte) error {
	var res CdnSiteScript
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
