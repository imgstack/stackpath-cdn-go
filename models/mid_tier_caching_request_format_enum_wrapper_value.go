// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// MidTierCachingRequestFormatEnumWrapperValue mid tier caching request format enum wrapper value
// swagger:model MidTierCachingRequestFormatEnumWrapperValue
type MidTierCachingRequestFormatEnumWrapperValue string

const (

	// MidTierCachingRequestFormatEnumWrapperValueUNKNOWN captures enum value "UNKNOWN"
	MidTierCachingRequestFormatEnumWrapperValueUNKNOWN MidTierCachingRequestFormatEnumWrapperValue = "UNKNOWN"

	// MidTierCachingRequestFormatEnumWrapperValueInternal captures enum value "internal"
	MidTierCachingRequestFormatEnumWrapperValueInternal MidTierCachingRequestFormatEnumWrapperValue = "internal"

	// MidTierCachingRequestFormatEnumWrapperValueExternal captures enum value "external"
	MidTierCachingRequestFormatEnumWrapperValueExternal MidTierCachingRequestFormatEnumWrapperValue = "external"
)

// for schema
var midTierCachingRequestFormatEnumWrapperValueEnum []interface{}

func init() {
	var res []MidTierCachingRequestFormatEnumWrapperValue
	if err := json.Unmarshal([]byte(`["UNKNOWN","internal","external"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		midTierCachingRequestFormatEnumWrapperValueEnum = append(midTierCachingRequestFormatEnumWrapperValueEnum, v)
	}
}

func (m MidTierCachingRequestFormatEnumWrapperValue) validateMidTierCachingRequestFormatEnumWrapperValueEnum(path, location string, value MidTierCachingRequestFormatEnumWrapperValue) error {
	if err := validate.Enum(path, location, value, midTierCachingRequestFormatEnumWrapperValueEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this mid tier caching request format enum wrapper value
func (m MidTierCachingRequestFormatEnumWrapperValue) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMidTierCachingRequestFormatEnumWrapperValueEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
