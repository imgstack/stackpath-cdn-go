// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CustconfAuthURLSignAKv2 The Akamai URL Signing v2 policy allows you to create a signed URL that
// implements the same signing method used by Akamai; therefore, published URLs
// from an Akamai CDN network can be transitioned to the Highwinds network
// without you having to change your signing methods.
// swagger:model custconfAuthUrlSignAKv2
type CustconfAuthURLSignAKv2 struct {

	// This is the delimiter used to separate the IP addresses in the ACL list.
	ACLDelimiter string `json:"aclDelimiter,omitempty"`

	// This allows you to enable the use of wildcard matches in your ACL list.
	EnableACLWildcard bool `json:"enableACLWildcard"`

	// enabled
	Enabled bool `json:"enabled"`

	// This is the field delimiter used to separate the parts of your token.
	FieldDelimiter string `json:"fieldDelimiter,omitempty"`

	// hash strategy
	HashStrategy AuthURLSignAKv2HashStrategyEnumWrapperValue `json:"hashStrategy,omitempty"`

	// String of values deliminated by a ',' character.
	HeaderFilter string `json:"headerFilter,omitempty"`

	// This is used by the API to perform conflict checking.
	ID string `json:"id,omitempty"`

	// match URL
	MatchURL bool `json:"matchURL"`

	// String of values deliminated by a ',' character.
	MethodFilter string `json:"methodFilter,omitempty"`

	// This is the shared secret used to sign the URL.  This value must be set to
	// a hexadecimal value padded to a byte boundary.  This value should only be
	// known by Highwinds and by personnel authorized to sign your content.
	PassPhrase string `json:"passPhrase,omitempty"`

	// String of values deliminated by a ',' character.
	PathFilter string `json:"pathFilter,omitempty"`

	// This is random data used as additional input to the hashing algorithm.
	Salt string `json:"salt,omitempty"`

	// String of values deliminated by a ',' character. The token parameter is the
	// name of the query string parameter or cookies that contains the value of
	// the token used in the signing algorithm.
	TokenField string `json:"tokenField,omitempty"`
}

// Validate validates this custconf auth Url sign a kv2
func (m *CustconfAuthURLSignAKv2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHashStrategy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustconfAuthURLSignAKv2) validateHashStrategy(formats strfmt.Registry) error {

	if swag.IsZero(m.HashStrategy) { // not required
		return nil
	}

	if err := m.HashStrategy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hashStrategy")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustconfAuthURLSignAKv2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustconfAuthURLSignAKv2) UnmarshalBinary(b []byte) error {
	var res CustconfAuthURLSignAKv2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
