// Code generated by go-swagger; DO NOT EDIT.

package cdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRenewCertificateParams creates a new RenewCertificateParams object
// with the default values initialized.
func NewRenewCertificateParams() *RenewCertificateParams {
	var ()
	return &RenewCertificateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRenewCertificateParamsWithTimeout creates a new RenewCertificateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRenewCertificateParamsWithTimeout(timeout time.Duration) *RenewCertificateParams {
	var ()
	return &RenewCertificateParams{

		timeout: timeout,
	}
}

// NewRenewCertificateParamsWithContext creates a new RenewCertificateParams object
// with the default values initialized, and the ability to set a context for a request
func NewRenewCertificateParamsWithContext(ctx context.Context) *RenewCertificateParams {
	var ()
	return &RenewCertificateParams{

		Context: ctx,
	}
}

// NewRenewCertificateParamsWithHTTPClient creates a new RenewCertificateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRenewCertificateParamsWithHTTPClient(client *http.Client) *RenewCertificateParams {
	var ()
	return &RenewCertificateParams{
		HTTPClient: client,
	}
}

/*RenewCertificateParams contains all the parameters to send to the API endpoint
for the renew certificate operation typically these are written to a http.Request
*/
type RenewCertificateParams struct {

	/*CertificateID
	  The ID of the SSL certificate to renew

	*/
	CertificateID string
	/*StackID
	  The ID of the stack containing the SSL certificate to renew

	*/
	StackID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the renew certificate params
func (o *RenewCertificateParams) WithTimeout(timeout time.Duration) *RenewCertificateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the renew certificate params
func (o *RenewCertificateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the renew certificate params
func (o *RenewCertificateParams) WithContext(ctx context.Context) *RenewCertificateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the renew certificate params
func (o *RenewCertificateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the renew certificate params
func (o *RenewCertificateParams) WithHTTPClient(client *http.Client) *RenewCertificateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the renew certificate params
func (o *RenewCertificateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCertificateID adds the certificateID to the renew certificate params
func (o *RenewCertificateParams) WithCertificateID(certificateID string) *RenewCertificateParams {
	o.SetCertificateID(certificateID)
	return o
}

// SetCertificateID adds the certificateId to the renew certificate params
func (o *RenewCertificateParams) SetCertificateID(certificateID string) {
	o.CertificateID = certificateID
}

// WithStackID adds the stackID to the renew certificate params
func (o *RenewCertificateParams) WithStackID(stackID string) *RenewCertificateParams {
	o.SetStackID(stackID)
	return o
}

// SetStackID adds the stackId to the renew certificate params
func (o *RenewCertificateParams) SetStackID(stackID string) {
	o.StackID = stackID
}

// WriteToRequest writes these params to a swagger request
func (o *RenewCertificateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param certificate_id
	if err := r.SetPathParam("certificate_id", o.CertificateID); err != nil {
		return err
	}

	// path param stack_id
	if err := r.SetPathParam("stack_id", o.StackID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
