// Code generated by go-swagger; DO NOT EDIT.

package cdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/renderinc/stackpath-cdn-go/models"
)

// RequestCertificateReader is a Reader for the RequestCertificate structure.
type RequestCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RequestCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRequestCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewRequestCertificateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewRequestCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewRequestCertificateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRequestCertificateOK creates a RequestCertificateOK with default headers values
func NewRequestCertificateOK() *RequestCertificateOK {
	return &RequestCertificateOK{}
}

/*RequestCertificateOK handles this case with default header values.

RequestCertificateOK request certificate o k
*/
type RequestCertificateOK struct {
	Payload *models.CdnRequestCertificateResponse
}

func (o *RequestCertificateOK) Error() string {
	return fmt.Sprintf("[POST /cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates/request][%d] requestCertificateOK  %+v", 200, o.Payload)
}

func (o *RequestCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CdnRequestCertificateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestCertificateUnauthorized creates a RequestCertificateUnauthorized with default headers values
func NewRequestCertificateUnauthorized() *RequestCertificateUnauthorized {
	return &RequestCertificateUnauthorized{}
}

/*RequestCertificateUnauthorized handles this case with default header values.

Returned when an unauthorized request is attempted.
*/
type RequestCertificateUnauthorized struct {
	Payload *models.APIStatus
}

func (o *RequestCertificateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates/request][%d] requestCertificateUnauthorized  %+v", 401, o.Payload)
}

func (o *RequestCertificateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestCertificateInternalServerError creates a RequestCertificateInternalServerError with default headers values
func NewRequestCertificateInternalServerError() *RequestCertificateInternalServerError {
	return &RequestCertificateInternalServerError{}
}

/*RequestCertificateInternalServerError handles this case with default header values.

Internal server error.
*/
type RequestCertificateInternalServerError struct {
	Payload *models.APIStatus
}

func (o *RequestCertificateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates/request][%d] requestCertificateInternalServerError  %+v", 500, o.Payload)
}

func (o *RequestCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestCertificateDefault creates a RequestCertificateDefault with default headers values
func NewRequestCertificateDefault(code int) *RequestCertificateDefault {
	return &RequestCertificateDefault{
		_statusCode: code,
	}
}

/*RequestCertificateDefault handles this case with default header values.

Default error structure.
*/
type RequestCertificateDefault struct {
	_statusCode int

	Payload *models.APIStatus
}

// Code gets the status code for the request certificate default response
func (o *RequestCertificateDefault) Code() int {
	return o._statusCode
}

func (o *RequestCertificateDefault) Error() string {
	return fmt.Sprintf("[POST /cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates/request][%d] RequestCertificate default  %+v", o._statusCode, o.Payload)
}

func (o *RequestCertificateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
