// Code generated by go-swagger; DO NOT EDIT.

package cdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/renderinc/stackpath-cdn-go/models"
)

// GetScopeHostnamesReader is a Reader for the GetScopeHostnames structure.
type GetScopeHostnamesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScopeHostnamesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetScopeHostnamesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetScopeHostnamesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetScopeHostnamesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetScopeHostnamesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetScopeHostnamesOK creates a GetScopeHostnamesOK with default headers values
func NewGetScopeHostnamesOK() *GetScopeHostnamesOK {
	return &GetScopeHostnamesOK{}
}

/*GetScopeHostnamesOK handles this case with default header values.

GetScopeHostnamesOK get scope hostnames o k
*/
type GetScopeHostnamesOK struct {
	Payload *models.CdnGetScopeHostnamesResponse
}

func (o *GetScopeHostnamesOK) Error() string {
	return fmt.Sprintf("[GET /cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/hostnames][%d] getScopeHostnamesOK  %+v", 200, o.Payload)
}

func (o *GetScopeHostnamesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CdnGetScopeHostnamesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScopeHostnamesUnauthorized creates a GetScopeHostnamesUnauthorized with default headers values
func NewGetScopeHostnamesUnauthorized() *GetScopeHostnamesUnauthorized {
	return &GetScopeHostnamesUnauthorized{}
}

/*GetScopeHostnamesUnauthorized handles this case with default header values.

Returned when an unauthorized request is attempted.
*/
type GetScopeHostnamesUnauthorized struct {
	Payload *models.APIStatus
}

func (o *GetScopeHostnamesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/hostnames][%d] getScopeHostnamesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScopeHostnamesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScopeHostnamesInternalServerError creates a GetScopeHostnamesInternalServerError with default headers values
func NewGetScopeHostnamesInternalServerError() *GetScopeHostnamesInternalServerError {
	return &GetScopeHostnamesInternalServerError{}
}

/*GetScopeHostnamesInternalServerError handles this case with default header values.

Internal server error.
*/
type GetScopeHostnamesInternalServerError struct {
	Payload *models.APIStatus
}

func (o *GetScopeHostnamesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/hostnames][%d] getScopeHostnamesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetScopeHostnamesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScopeHostnamesDefault creates a GetScopeHostnamesDefault with default headers values
func NewGetScopeHostnamesDefault(code int) *GetScopeHostnamesDefault {
	return &GetScopeHostnamesDefault{
		_statusCode: code,
	}
}

/*GetScopeHostnamesDefault handles this case with default header values.

Default error structure.
*/
type GetScopeHostnamesDefault struct {
	_statusCode int

	Payload *models.APIStatus
}

// Code gets the status code for the get scope hostnames default response
func (o *GetScopeHostnamesDefault) Code() int {
	return o._statusCode
}

func (o *GetScopeHostnamesDefault) Error() string {
	return fmt.Sprintf("[GET /cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/hostnames][%d] GetScopeHostnames default  %+v", o._statusCode, o.Payload)
}

func (o *GetScopeHostnamesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
