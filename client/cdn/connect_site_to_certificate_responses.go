// Code generated by go-swagger; DO NOT EDIT.

package cdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renderinc/stackpath-cdn-go/models"
)

// ConnectSiteToCertificateReader is a Reader for the ConnectSiteToCertificate structure.
type ConnectSiteToCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConnectSiteToCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConnectSiteToCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewConnectSiteToCertificateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConnectSiteToCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewConnectSiteToCertificateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewConnectSiteToCertificateOK creates a ConnectSiteToCertificateOK with default headers values
func NewConnectSiteToCertificateOK() *ConnectSiteToCertificateOK {
	return &ConnectSiteToCertificateOK{}
}

/* ConnectSiteToCertificateOK describes a response with status code 200, with default header values.

ConnectSiteToCertificateOK connect site to certificate o k
*/
type ConnectSiteToCertificateOK struct {
	Payload *models.CdnConnectSiteToCertificateResponse
}

func (o *ConnectSiteToCertificateOK) Error() string {
	return fmt.Sprintf("[PUT /cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates/{certificate_id}][%d] connectSiteToCertificateOK  %+v", 200, o.Payload)
}
func (o *ConnectSiteToCertificateOK) GetPayload() *models.CdnConnectSiteToCertificateResponse {
	return o.Payload
}

func (o *ConnectSiteToCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CdnConnectSiteToCertificateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectSiteToCertificateUnauthorized creates a ConnectSiteToCertificateUnauthorized with default headers values
func NewConnectSiteToCertificateUnauthorized() *ConnectSiteToCertificateUnauthorized {
	return &ConnectSiteToCertificateUnauthorized{}
}

/* ConnectSiteToCertificateUnauthorized describes a response with status code 401, with default header values.

Returned when an unauthorized request is attempted.
*/
type ConnectSiteToCertificateUnauthorized struct {
	Payload *models.APIStatus
}

func (o *ConnectSiteToCertificateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates/{certificate_id}][%d] connectSiteToCertificateUnauthorized  %+v", 401, o.Payload)
}
func (o *ConnectSiteToCertificateUnauthorized) GetPayload() *models.APIStatus {
	return o.Payload
}

func (o *ConnectSiteToCertificateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectSiteToCertificateInternalServerError creates a ConnectSiteToCertificateInternalServerError with default headers values
func NewConnectSiteToCertificateInternalServerError() *ConnectSiteToCertificateInternalServerError {
	return &ConnectSiteToCertificateInternalServerError{}
}

/* ConnectSiteToCertificateInternalServerError describes a response with status code 500, with default header values.

Internal server error.
*/
type ConnectSiteToCertificateInternalServerError struct {
	Payload *models.APIStatus
}

func (o *ConnectSiteToCertificateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates/{certificate_id}][%d] connectSiteToCertificateInternalServerError  %+v", 500, o.Payload)
}
func (o *ConnectSiteToCertificateInternalServerError) GetPayload() *models.APIStatus {
	return o.Payload
}

func (o *ConnectSiteToCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectSiteToCertificateDefault creates a ConnectSiteToCertificateDefault with default headers values
func NewConnectSiteToCertificateDefault(code int) *ConnectSiteToCertificateDefault {
	return &ConnectSiteToCertificateDefault{
		_statusCode: code,
	}
}

/* ConnectSiteToCertificateDefault describes a response with status code -1, with default header values.

Default error structure.
*/
type ConnectSiteToCertificateDefault struct {
	_statusCode int

	Payload *models.APIStatus
}

// Code gets the status code for the connect site to certificate default response
func (o *ConnectSiteToCertificateDefault) Code() int {
	return o._statusCode
}

func (o *ConnectSiteToCertificateDefault) Error() string {
	return fmt.Sprintf("[PUT /cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates/{certificate_id}][%d] ConnectSiteToCertificate default  %+v", o._statusCode, o.Payload)
}
func (o *ConnectSiteToCertificateDefault) GetPayload() *models.APIStatus {
	return o.Payload
}

func (o *ConnectSiteToCertificateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
