// Code generated by go-swagger; DO NOT EDIT.

package cdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cdn API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cdn API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConnectScopeToOrigin(params *ConnectScopeToOriginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConnectScopeToOriginOK, error)

	ConnectSiteToCertificate(params *ConnectSiteToCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConnectSiteToCertificateOK, error)

	CreateCertificate(params *CreateCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCertificateOK, error)

	CreateScope(params *CreateScopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScopeOK, error)

	CreateScopeHostname(params *CreateScopeHostnameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScopeHostnameOK, error)

	CreateScopeRule(params *CreateScopeRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScopeRuleOK, error)

	CreateSite(params *CreateSiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSiteOK, error)

	CreateSiteScript(params *CreateSiteScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSiteScriptOK, error)

	DeleteCertificate(params *DeleteCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCertificateNoContent, error)

	DeleteScope(params *DeleteScopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScopeNoContent, error)

	DeleteScopeHostname(params *DeleteScopeHostnameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScopeHostnameNoContent, error)

	DeleteScopeRule(params *DeleteScopeRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScopeRuleNoContent, error)

	DeleteSite(params *DeleteSiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSiteNoContent, error)

	DeleteSiteScript(params *DeleteSiteScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSiteScriptNoContent, error)

	DisableSite(params *DisableSiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableSiteNoContent, error)

	DisconnectScopeFromOrigin(params *DisconnectScopeFromOriginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisconnectScopeFromOriginNoContent, error)

	EnableSite(params *EnableSiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableSiteNoContent, error)

	GetCDNIPs(params *GetCDNIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDNIPsOK, error)

	GetCertificate(params *GetCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificateOK, error)

	GetCertificateSites(params *GetCertificateSitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificateSitesOK, error)

	GetCertificateVerificationDetails(params *GetCertificateVerificationDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificateVerificationDetailsOK, error)

	GetCertificates(params *GetCertificatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificatesOK, error)

	GetClosestPops(params *GetClosestPopsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClosestPopsOK, error)

	GetMetrics(params *GetMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetricsOK, error)

	GetOrigin(params *GetOriginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOriginOK, error)

	GetOrigins(params *GetOriginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOriginsOK, error)

	GetPops(params *GetPopsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPopsOK, error)

	GetPurgeStatus(params *GetPurgeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPurgeStatusOK, error)

	GetScopeConfiguration(params *GetScopeConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeConfigurationOK, error)

	GetScopeHostnames(params *GetScopeHostnamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeHostnamesOK, error)

	GetScopeOrigins(params *GetScopeOriginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeOriginsOK, error)

	GetScopeRule(params *GetScopeRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeRuleOK, error)

	GetScopeRuleConfiguration(params *GetScopeRuleConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeRuleConfigurationOK, error)

	GetScopeRules(params *GetScopeRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeRulesOK, error)

	GetSite(params *GetSiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteOK, error)

	GetSiteCertificates(params *GetSiteCertificatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteCertificatesOK, error)

	GetSiteDNSTargets(params *GetSiteDNSTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteDNSTargetsOK, error)

	GetSiteScopes(params *GetSiteScopesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteScopesOK, error)

	GetSiteScript(params *GetSiteScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteScriptOK, error)

	GetSiteScript2(params *GetSiteScript2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteScript2OK, error)

	GetSiteScripts(params *GetSiteScriptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteScriptsOK, error)

	GetSites(params *GetSitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSitesOK, error)

	PurgeContent(params *PurgeContentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PurgeContentOK, error)

	RenewCertificate(params *RenewCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenewCertificateNoContent, error)

	RequestCertificate(params *RequestCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestCertificateOK, error)

	ScanOrigin(params *ScanOriginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ScanOriginOK, error)

	UpdateCertificate(params *UpdateCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCertificateOK, error)

	UpdateOrigin(params *UpdateOriginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOriginOK, error)

	UpdateScopeConfiguration(params *UpdateScopeConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScopeConfigurationOK, error)

	UpdateScopeRuleConfiguration(params *UpdateScopeRuleConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScopeRuleConfigurationOK, error)

	UpdateSiteCertificateHosts(params *UpdateSiteCertificateHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSiteCertificateHostsNoContent, error)

	UpdateSiteScript(params *UpdateSiteScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSiteScriptOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ConnectScopeToOrigin connects an origin to a c d n site s scope

  The origin is automatically created if necessary. When the request contains a priority which an origin already associated with the scope has set, the existing origin is disconnected. The priority of an origin already associated with a scope can be modified via this endpoint.
*/
func (a *Client) ConnectScopeToOrigin(params *ConnectScopeToOriginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConnectScopeToOriginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectScopeToOriginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConnectScopeToOrigin",
		Method:             "POST",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/origins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConnectScopeToOriginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectScopeToOriginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectScopeToOriginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectSiteToCertificate associates a c d n site with an s s l certificate

  Association is performed without validating if the site has a hostname covered by the certificate. This is useful for preparation work required for getting a site ready for traffic.

If a certificate is uploaded which contains hostnames for sites, it will automatically be connected to those sites. If a hostname is added to a site which is covered by an SSL certificate, it will automatically be connected to the certificate.
*/
func (a *Client) ConnectSiteToCertificate(params *ConnectSiteToCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConnectSiteToCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectSiteToCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ConnectSiteToCertificate",
		Method:             "PUT",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates/{certificate_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConnectSiteToCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConnectSiteToCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectSiteToCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateCertificate adds an s s l certificate to a stack

  The certificate is automatically associated with CDN site scope hostnames that match either the certificate's subject or its alternative names.
*/
func (a *Client) CreateCertificate(params *CreateCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCertificate",
		Method:             "POST",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateScope creates a new c d n site scope
*/
func (a *Client) CreateScope(params *CreateScopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScopeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScopeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateScope",
		Method:             "POST",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScopeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScopeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateScopeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateScopeHostname adds a hostname to a c d n site s scope
*/
func (a *Client) CreateScopeHostname(params *CreateScopeHostnameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScopeHostnameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScopeHostnameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateScopeHostname",
		Method:             "POST",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/hostnames",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScopeHostnameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScopeHostnameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateScopeHostnameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateScopeRule creates an edge rule on a c d n site scope
*/
func (a *Client) CreateScopeRule(params *CreateScopeRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScopeRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScopeRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateScopeRule",
		Method:             "POST",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScopeRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScopeRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateScopeRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateSite creates a new c d n site
*/
func (a *Client) CreateSite(params *CreateSiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSiteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSiteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSite",
		Method:             "POST",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSiteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSiteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateSiteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateSiteScript creates an edge engine script
*/
func (a *Client) CreateSiteScript(params *CreateSiteScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSiteScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSiteScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSiteScript",
		Method:             "POST",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSiteScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSiteScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateSiteScriptDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteCertificate deletes an s s l certificate
*/
func (a *Client) DeleteCertificate(params *DeleteCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCertificateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCertificate",
		Method:             "DELETE",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/certificates/{certificate_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCertificateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteScope deletes a c d n site scope
*/
func (a *Client) DeleteScope(params *DeleteScopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScopeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScopeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteScope",
		Method:             "DELETE",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScopeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScopeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteScopeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteScopeHostname removes a hostname from a c d n site s scope
*/
func (a *Client) DeleteScopeHostname(params *DeleteScopeHostnameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScopeHostnameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScopeHostnameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteScopeHostname",
		Method:             "DELETE",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/hostnames/{domain}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScopeHostnameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScopeHostnameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteScopeHostnameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteScopeRule deletes an edge rule
*/
func (a *Client) DeleteScopeRule(params *DeleteScopeRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScopeRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScopeRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteScopeRule",
		Method:             "DELETE",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/rules/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScopeRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScopeRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteScopeRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteSite deletes a c d n site
*/
func (a *Client) DeleteSite(params *DeleteSiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSiteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSiteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSite",
		Method:             "DELETE",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSiteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSiteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSiteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteSiteScript deletes an edge engine script
*/
func (a *Client) DeleteSiteScript(params *DeleteSiteScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSiteScriptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSiteScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteSiteScript",
		Method:             "DELETE",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scripts/{script_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSiteScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSiteScriptNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteSiteScriptDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DisableSite disables a c d n site
*/
func (a *Client) DisableSite(params *DisableSiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableSiteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableSiteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DisableSite",
		Method:             "POST",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisableSiteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableSiteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DisableSiteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DisconnectScopeFromOrigin disconnects an origin from c d n site s scope
*/
func (a *Client) DisconnectScopeFromOrigin(params *DisconnectScopeFromOriginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisconnectScopeFromOriginNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisconnectScopeFromOriginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DisconnectScopeFromOrigin",
		Method:             "DELETE",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/origins/{origin_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DisconnectScopeFromOriginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisconnectScopeFromOriginNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DisconnectScopeFromOriginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  EnableSite enables a c d n site
*/
func (a *Client) EnableSite(params *EnableSiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableSiteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableSiteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnableSite",
		Method:             "POST",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EnableSiteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableSiteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EnableSiteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCDNIPs retrieves a list of IP addresses used by the stack path edge network
*/
func (a *Client) GetCDNIPs(params *GetCDNIPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDNIPsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCDNIPsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCDNIPs",
		Method:             "GET",
		PathPattern:        "/cdn/v1/ips",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCDNIPsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCDNIPsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCDNIPsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCertificate retrieves an individual s s l certificate
*/
func (a *Client) GetCertificate(params *GetCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCertificate",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/certificates/{certificate_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCertificateSites retrieves the c d n sites associated with an s s l certificate
*/
func (a *Client) GetCertificateSites(params *GetCertificateSitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificateSitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateSitesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCertificateSites",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/certificates/{certificate_id}/sites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCertificateSitesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateSitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCertificateSitesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCertificateVerificationDetails retrieves a c d n site s s s l certificate manual verification details
*/
func (a *Client) GetCertificateVerificationDetails(params *GetCertificateVerificationDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificateVerificationDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateVerificationDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCertificateVerificationDetails",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/certificates/{certificate_id}/verification_details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCertificateVerificationDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateVerificationDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCertificateVerificationDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCertificates retrieves a stack s associated s s l certificates
*/
func (a *Client) GetCertificates(params *GetCertificatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCertificates",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCertificatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCertificatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetClosestPops scans a URL from the stack path edge network and return a performance report

  Results are ordered with the fastest POP response first
*/
func (a *Client) GetClosestPops(params *GetClosestPopsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClosestPopsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClosestPopsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetClosestPops",
		Method:             "GET",
		PathPattern:        "/cdn/v1/pops/closest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClosestPopsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClosestPopsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetClosestPopsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetMetrics retrieves request metrics for all c d n sites in a stack
*/
func (a *Client) GetMetrics(params *GetMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMetrics",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetMetricsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetOrigin retrieves an individual origin
*/
func (a *Client) GetOrigin(params *GetOriginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOriginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOriginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrigin",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/origins/{origin_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOriginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOriginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOriginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetOrigins retrieves a stack s site origins
*/
func (a *Client) GetOrigins(params *GetOriginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOriginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOriginsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrigins",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/origins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOriginsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOriginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOriginsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPops retrieves a list of all available stack path points of presence
*/
func (a *Client) GetPops(params *GetPopsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPopsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPopsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPops",
		Method:             "GET",
		PathPattern:        "/cdn/v1/pops",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPopsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPopsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPopsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPurgeStatus retrieves a purge request s status
*/
func (a *Client) GetPurgeStatus(params *GetPurgeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPurgeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPurgeStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPurgeStatus",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/purge/{purge_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPurgeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPurgeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPurgeStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetScopeConfiguration retrieves a c d n site s scope configuration
*/
func (a *Client) GetScopeConfiguration(params *GetScopeConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScopeConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScopeConfiguration",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScopeConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScopeConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetScopeConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetScopeHostnames retrieves the hostnames configured on a c d n site s scope

  Hostnames allow the CDN to recognize an HTTP request and associate it with a CDN site.
*/
func (a *Client) GetScopeHostnames(params *GetScopeHostnamesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeHostnamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScopeHostnamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScopeHostnames",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/hostnames",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScopeHostnamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScopeHostnamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetScopeHostnamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetScopeOrigins retrieves the origins behind a c d n site s scope
*/
func (a *Client) GetScopeOrigins(params *GetScopeOriginsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeOriginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScopeOriginsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScopeOrigins",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/origins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScopeOriginsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScopeOriginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetScopeOriginsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetScopeRule retrieves an individual edge rule from a c d n site scope
*/
func (a *Client) GetScopeRule(params *GetScopeRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScopeRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScopeRule",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/rules/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScopeRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScopeRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetScopeRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetScopeRuleConfiguration retrieves an edge rule s configuration
*/
func (a *Client) GetScopeRuleConfiguration(params *GetScopeRuleConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeRuleConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScopeRuleConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScopeRuleConfiguration",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/rules/{rule_id}/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScopeRuleConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScopeRuleConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetScopeRuleConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetScopeRules retrieves all edge rules on a c d n site scope
*/
func (a *Client) GetScopeRules(params *GetScopeRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScopeRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScopeRules",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScopeRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScopeRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetScopeRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSite retrieves an individual c d n site
*/
func (a *Client) GetSite(params *GetSiteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSite",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSiteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSiteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSiteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSiteCertificates retrieves a site s s s l certificates
*/
func (a *Client) GetSiteCertificates(params *GetSiteCertificatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteCertificatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteCertificatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSiteCertificates",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSiteCertificatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSiteCertificatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSiteCertificatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSiteDNSTargets retrieves a c d n site s DNS c n a m e targets

  A site's hostname should point to these CNAME targets in order for traffic to be sent through StackPath's edge nodes.
*/
func (a *Client) GetSiteDNSTargets(params *GetSiteDNSTargetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteDNSTargetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteDNSTargetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSiteDnsTargets",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/dns/targets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSiteDNSTargetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSiteDNSTargetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSiteDNSTargetsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSiteScopes retrieves a c d n site s scopes
*/
func (a *Client) GetSiteScopes(params *GetSiteScopesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteScopesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteScopesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSiteScopes",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSiteScopesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSiteScopesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSiteScopesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSiteScript retrieves an individual edge engine script
*/
func (a *Client) GetSiteScript(params *GetSiteScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSiteScript",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scripts/{script_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSiteScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSiteScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSiteScriptDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSiteScript2 retrieves an individual edge engine script
*/
func (a *Client) GetSiteScript2(params *GetSiteScript2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteScript2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteScript2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSiteScript2",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scripts/{script_id}/{script_version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSiteScript2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSiteScript2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSiteScript2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSiteScripts retrieves all edge engine scripts associated with a c d n site
*/
func (a *Client) GetSiteScripts(params *GetSiteScriptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSiteScriptsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteScriptsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSiteScripts",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSiteScriptsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSiteScriptsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSiteScriptsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetSites retrieves all c d n sites in a stack
*/
func (a *Client) GetSites(params *GetSitesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSites",
		Method:             "GET",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSitesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSitesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetSitesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PurgeContent purges cached content for all c d n sites on a stack

  Content is re-cached on the CDN the next time it is requested. Use the returned purge ID to see the status of a purge request.
*/
func (a *Client) PurgeContent(params *PurgeContentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PurgeContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurgeContentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PurgeContent",
		Method:             "POST",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/purge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurgeContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurgeContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PurgeContentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RenewCertificate issues a renewal for an s s l certificate

  StackPath automatically renews certificates that are 30 days from expiration. Call this to retry a renewal that previously failed.
*/
func (a *Client) RenewCertificate(params *RenewCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenewCertificateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenewCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RenewCertificate",
		Method:             "POST",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/certificates/{certificate_id}/renew",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RenewCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RenewCertificateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RenewCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RequestCertificate requests an s s l certificate for a c d n site

  The optional list of hosts should be delivery domains for the site. If no hosts parameter is provided, all delivery domains for a site will be included in the SAN field. If the hosts parameter is provided, then the first entry in the list will be used as the certificate's common name.
*/
func (a *Client) RequestCertificate(params *RequestCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RequestCertificate",
		Method:             "POST",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RequestCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ScanOrigin scans an origin from the c d n

  Retrieve information regarding an origin, such as its IP address and whether or not it supports SSL.
*/
func (a *Client) ScanOrigin(params *ScanOriginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ScanOriginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScanOriginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScanOrigin",
		Method:             "POST",
		PathPattern:        "/cdn/v1/origins/scan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScanOriginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScanOriginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ScanOriginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateCertificate updates an s s l certificate
*/
func (a *Client) UpdateCertificate(params *UpdateCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCertificate",
		Method:             "PUT",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/certificates/{certificate_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateOrigin updates an origin
*/
func (a *Client) UpdateOrigin(params *UpdateOriginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOriginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOriginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateOrigin",
		Method:             "PATCH",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/origins/{origin_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOriginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOriginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateOriginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateScopeConfiguration updates a c d n site s scope configuration
*/
func (a *Client) UpdateScopeConfiguration(params *UpdateScopeConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScopeConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScopeConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateScopeConfiguration",
		Method:             "PATCH",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateScopeConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateScopeConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateScopeConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateScopeRuleConfiguration updates an edge rule s configuration
*/
func (a *Client) UpdateScopeRuleConfiguration(params *UpdateScopeRuleConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScopeRuleConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScopeRuleConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateScopeRuleConfiguration",
		Method:             "PATCH",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/rules/{rule_id}/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateScopeRuleConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateScopeRuleConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateScopeRuleConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateSiteCertificateHosts updates an s s l certificate s hosts

  Updating hosts issues a new certificate.
*/
func (a *Client) UpdateSiteCertificateHosts(params *UpdateSiteCertificateHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSiteCertificateHostsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSiteCertificateHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSiteCertificateHosts",
		Method:             "PUT",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates/{certificate_id}/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSiteCertificateHostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSiteCertificateHostsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSiteCertificateHostsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateSiteScript updates an edge engine script
*/
func (a *Client) UpdateSiteScript(params *UpdateSiteScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSiteScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSiteScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateSiteScript",
		Method:             "PATCH",
		PathPattern:        "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scripts/{script_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSiteScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSiteScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateSiteScriptDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
