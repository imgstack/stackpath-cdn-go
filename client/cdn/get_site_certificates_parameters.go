// Code generated by go-swagger; DO NOT EDIT.

package cdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSiteCertificatesParams creates a new GetSiteCertificatesParams object
// with the default values initialized.
func NewGetSiteCertificatesParams() *GetSiteCertificatesParams {
	var ()
	return &GetSiteCertificatesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSiteCertificatesParamsWithTimeout creates a new GetSiteCertificatesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSiteCertificatesParamsWithTimeout(timeout time.Duration) *GetSiteCertificatesParams {
	var ()
	return &GetSiteCertificatesParams{

		timeout: timeout,
	}
}

// NewGetSiteCertificatesParamsWithContext creates a new GetSiteCertificatesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSiteCertificatesParamsWithContext(ctx context.Context) *GetSiteCertificatesParams {
	var ()
	return &GetSiteCertificatesParams{

		Context: ctx,
	}
}

// NewGetSiteCertificatesParamsWithHTTPClient creates a new GetSiteCertificatesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSiteCertificatesParamsWithHTTPClient(client *http.Client) *GetSiteCertificatesParams {
	var ()
	return &GetSiteCertificatesParams{
		HTTPClient: client,
	}
}

/*GetSiteCertificatesParams contains all the parameters to send to the API endpoint
for the get site certificates operation typically these are written to a http.Request
*/
type GetSiteCertificatesParams struct {

	/*PageRequestAfter
	  after is the cursor value after which data will be returned.

	*/
	PageRequestAfter *string
	/*PageRequestFilter
	  filter will accept sql style constraints.

	*/
	PageRequestFilter *string
	/*PageRequestFirst
	  first is the number of items desired.

	*/
	PageRequestFirst *string
	/*PageRequestSortBy
	  sort_by will sort the response by the given field.

	*/
	PageRequestSortBy *string
	/*SiteID*/
	SiteID string
	/*StackID*/
	StackID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get site certificates params
func (o *GetSiteCertificatesParams) WithTimeout(timeout time.Duration) *GetSiteCertificatesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get site certificates params
func (o *GetSiteCertificatesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get site certificates params
func (o *GetSiteCertificatesParams) WithContext(ctx context.Context) *GetSiteCertificatesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get site certificates params
func (o *GetSiteCertificatesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get site certificates params
func (o *GetSiteCertificatesParams) WithHTTPClient(client *http.Client) *GetSiteCertificatesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get site certificates params
func (o *GetSiteCertificatesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPageRequestAfter adds the pageRequestAfter to the get site certificates params
func (o *GetSiteCertificatesParams) WithPageRequestAfter(pageRequestAfter *string) *GetSiteCertificatesParams {
	o.SetPageRequestAfter(pageRequestAfter)
	return o
}

// SetPageRequestAfter adds the pageRequestAfter to the get site certificates params
func (o *GetSiteCertificatesParams) SetPageRequestAfter(pageRequestAfter *string) {
	o.PageRequestAfter = pageRequestAfter
}

// WithPageRequestFilter adds the pageRequestFilter to the get site certificates params
func (o *GetSiteCertificatesParams) WithPageRequestFilter(pageRequestFilter *string) *GetSiteCertificatesParams {
	o.SetPageRequestFilter(pageRequestFilter)
	return o
}

// SetPageRequestFilter adds the pageRequestFilter to the get site certificates params
func (o *GetSiteCertificatesParams) SetPageRequestFilter(pageRequestFilter *string) {
	o.PageRequestFilter = pageRequestFilter
}

// WithPageRequestFirst adds the pageRequestFirst to the get site certificates params
func (o *GetSiteCertificatesParams) WithPageRequestFirst(pageRequestFirst *string) *GetSiteCertificatesParams {
	o.SetPageRequestFirst(pageRequestFirst)
	return o
}

// SetPageRequestFirst adds the pageRequestFirst to the get site certificates params
func (o *GetSiteCertificatesParams) SetPageRequestFirst(pageRequestFirst *string) {
	o.PageRequestFirst = pageRequestFirst
}

// WithPageRequestSortBy adds the pageRequestSortBy to the get site certificates params
func (o *GetSiteCertificatesParams) WithPageRequestSortBy(pageRequestSortBy *string) *GetSiteCertificatesParams {
	o.SetPageRequestSortBy(pageRequestSortBy)
	return o
}

// SetPageRequestSortBy adds the pageRequestSortBy to the get site certificates params
func (o *GetSiteCertificatesParams) SetPageRequestSortBy(pageRequestSortBy *string) {
	o.PageRequestSortBy = pageRequestSortBy
}

// WithSiteID adds the siteID to the get site certificates params
func (o *GetSiteCertificatesParams) WithSiteID(siteID string) *GetSiteCertificatesParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the get site certificates params
func (o *GetSiteCertificatesParams) SetSiteID(siteID string) {
	o.SiteID = siteID
}

// WithStackID adds the stackID to the get site certificates params
func (o *GetSiteCertificatesParams) WithStackID(stackID string) *GetSiteCertificatesParams {
	o.SetStackID(stackID)
	return o
}

// SetStackID adds the stackId to the get site certificates params
func (o *GetSiteCertificatesParams) SetStackID(stackID string) {
	o.StackID = stackID
}

// WriteToRequest writes these params to a swagger request
func (o *GetSiteCertificatesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PageRequestAfter != nil {

		// query param page_request.after
		var qrPageRequestAfter string
		if o.PageRequestAfter != nil {
			qrPageRequestAfter = *o.PageRequestAfter
		}
		qPageRequestAfter := qrPageRequestAfter
		if qPageRequestAfter != "" {
			if err := r.SetQueryParam("page_request.after", qPageRequestAfter); err != nil {
				return err
			}
		}

	}

	if o.PageRequestFilter != nil {

		// query param page_request.filter
		var qrPageRequestFilter string
		if o.PageRequestFilter != nil {
			qrPageRequestFilter = *o.PageRequestFilter
		}
		qPageRequestFilter := qrPageRequestFilter
		if qPageRequestFilter != "" {
			if err := r.SetQueryParam("page_request.filter", qPageRequestFilter); err != nil {
				return err
			}
		}

	}

	if o.PageRequestFirst != nil {

		// query param page_request.first
		var qrPageRequestFirst string
		if o.PageRequestFirst != nil {
			qrPageRequestFirst = *o.PageRequestFirst
		}
		qPageRequestFirst := qrPageRequestFirst
		if qPageRequestFirst != "" {
			if err := r.SetQueryParam("page_request.first", qPageRequestFirst); err != nil {
				return err
			}
		}

	}

	if o.PageRequestSortBy != nil {

		// query param page_request.sort_by
		var qrPageRequestSortBy string
		if o.PageRequestSortBy != nil {
			qrPageRequestSortBy = *o.PageRequestSortBy
		}
		qPageRequestSortBy := qrPageRequestSortBy
		if qPageRequestSortBy != "" {
			if err := r.SetQueryParam("page_request.sort_by", qPageRequestSortBy); err != nil {
				return err
			}
		}

	}

	// path param site_id
	if err := r.SetPathParam("site_id", o.SiteID); err != nil {
		return err
	}

	// path param stack_id
	if err := r.SetPathParam("stack_id", o.StackID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
