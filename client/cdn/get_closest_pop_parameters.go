// Code generated by go-swagger; DO NOT EDIT.

package cdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetClosestPopParams creates a new GetClosestPopParams object
// with the default values initialized.
func NewGetClosestPopParams() *GetClosestPopParams {
	var ()
	return &GetClosestPopParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetClosestPopParamsWithTimeout creates a new GetClosestPopParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetClosestPopParamsWithTimeout(timeout time.Duration) *GetClosestPopParams {
	var ()
	return &GetClosestPopParams{

		timeout: timeout,
	}
}

// NewGetClosestPopParamsWithContext creates a new GetClosestPopParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetClosestPopParamsWithContext(ctx context.Context) *GetClosestPopParams {
	var ()
	return &GetClosestPopParams{

		Context: ctx,
	}
}

// NewGetClosestPopParamsWithHTTPClient creates a new GetClosestPopParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetClosestPopParamsWithHTTPClient(client *http.Client) *GetClosestPopParams {
	var ()
	return &GetClosestPopParams{
		HTTPClient: client,
	}
}

/*GetClosestPopParams contains all the parameters to send to the API endpoint
for the get closest pop operation typically these are written to a http.Request
*/
type GetClosestPopParams struct {

	/*URL*/
	URL *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get closest pop params
func (o *GetClosestPopParams) WithTimeout(timeout time.Duration) *GetClosestPopParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get closest pop params
func (o *GetClosestPopParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get closest pop params
func (o *GetClosestPopParams) WithContext(ctx context.Context) *GetClosestPopParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get closest pop params
func (o *GetClosestPopParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get closest pop params
func (o *GetClosestPopParams) WithHTTPClient(client *http.Client) *GetClosestPopParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get closest pop params
func (o *GetClosestPopParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithURL adds the url to the get closest pop params
func (o *GetClosestPopParams) WithURL(url *string) *GetClosestPopParams {
	o.SetURL(url)
	return o
}

// SetURL adds the url to the get closest pop params
func (o *GetClosestPopParams) SetURL(url *string) {
	o.URL = url
}

// WriteToRequest writes these params to a swagger request
func (o *GetClosestPopParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.URL != nil {

		// query param url
		var qrURL string
		if o.URL != nil {
			qrURL = *o.URL
		}
		qURL := qrURL
		if qURL != "" {
			if err := r.SetQueryParam("url", qURL); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
