// Code generated by go-swagger; DO NOT EDIT.

package cdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDisconnectScopeFromOriginParams creates a new DisconnectScopeFromOriginParams object
// with the default values initialized.
func NewDisconnectScopeFromOriginParams() *DisconnectScopeFromOriginParams {
	var ()
	return &DisconnectScopeFromOriginParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDisconnectScopeFromOriginParamsWithTimeout creates a new DisconnectScopeFromOriginParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDisconnectScopeFromOriginParamsWithTimeout(timeout time.Duration) *DisconnectScopeFromOriginParams {
	var ()
	return &DisconnectScopeFromOriginParams{

		timeout: timeout,
	}
}

// NewDisconnectScopeFromOriginParamsWithContext creates a new DisconnectScopeFromOriginParams object
// with the default values initialized, and the ability to set a context for a request
func NewDisconnectScopeFromOriginParamsWithContext(ctx context.Context) *DisconnectScopeFromOriginParams {
	var ()
	return &DisconnectScopeFromOriginParams{

		Context: ctx,
	}
}

// NewDisconnectScopeFromOriginParamsWithHTTPClient creates a new DisconnectScopeFromOriginParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDisconnectScopeFromOriginParamsWithHTTPClient(client *http.Client) *DisconnectScopeFromOriginParams {
	var ()
	return &DisconnectScopeFromOriginParams{
		HTTPClient: client,
	}
}

/*DisconnectScopeFromOriginParams contains all the parameters to send to the API endpoint
for the disconnect scope from origin operation typically these are written to a http.Request
*/
type DisconnectScopeFromOriginParams struct {

	/*OriginID
	  The ID of the origin to remove from a scope

	*/
	OriginID string
	/*ScopeID
	  The ID of the scope to remove an origin from

	*/
	ScopeID string
	/*SiteID
	  The ID of the site containing the scope to remove an origin from

	*/
	SiteID string
	/*StackID
	  The ID of the stack containing the site containing the scope to remove an origin from

	*/
	StackID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) WithTimeout(timeout time.Duration) *DisconnectScopeFromOriginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) WithContext(ctx context.Context) *DisconnectScopeFromOriginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) WithHTTPClient(client *http.Client) *DisconnectScopeFromOriginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOriginID adds the originID to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) WithOriginID(originID string) *DisconnectScopeFromOriginParams {
	o.SetOriginID(originID)
	return o
}

// SetOriginID adds the originId to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) SetOriginID(originID string) {
	o.OriginID = originID
}

// WithScopeID adds the scopeID to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) WithScopeID(scopeID string) *DisconnectScopeFromOriginParams {
	o.SetScopeID(scopeID)
	return o
}

// SetScopeID adds the scopeId to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) SetScopeID(scopeID string) {
	o.ScopeID = scopeID
}

// WithSiteID adds the siteID to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) WithSiteID(siteID string) *DisconnectScopeFromOriginParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) SetSiteID(siteID string) {
	o.SiteID = siteID
}

// WithStackID adds the stackID to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) WithStackID(stackID string) *DisconnectScopeFromOriginParams {
	o.SetStackID(stackID)
	return o
}

// SetStackID adds the stackId to the disconnect scope from origin params
func (o *DisconnectScopeFromOriginParams) SetStackID(stackID string) {
	o.StackID = stackID
}

// WriteToRequest writes these params to a swagger request
func (o *DisconnectScopeFromOriginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param origin_id
	if err := r.SetPathParam("origin_id", o.OriginID); err != nil {
		return err
	}

	// path param scope_id
	if err := r.SetPathParam("scope_id", o.ScopeID); err != nil {
		return err
	}

	// path param site_id
	if err := r.SetPathParam("site_id", o.SiteID); err != nil {
		return err
	}

	// path param stack_id
	if err := r.SetPathParam("stack_id", o.StackID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
