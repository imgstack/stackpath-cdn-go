// Code generated by go-swagger; DO NOT EDIT.

package cdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/renderinc/stackpath-cdn-go/models"
)

// NewUpdateScopeRuleConfigurationParams creates a new UpdateScopeRuleConfigurationParams object
// with the default values initialized.
func NewUpdateScopeRuleConfigurationParams() *UpdateScopeRuleConfigurationParams {
	var ()
	return &UpdateScopeRuleConfigurationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateScopeRuleConfigurationParamsWithTimeout creates a new UpdateScopeRuleConfigurationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateScopeRuleConfigurationParamsWithTimeout(timeout time.Duration) *UpdateScopeRuleConfigurationParams {
	var ()
	return &UpdateScopeRuleConfigurationParams{

		timeout: timeout,
	}
}

// NewUpdateScopeRuleConfigurationParamsWithContext creates a new UpdateScopeRuleConfigurationParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateScopeRuleConfigurationParamsWithContext(ctx context.Context) *UpdateScopeRuleConfigurationParams {
	var ()
	return &UpdateScopeRuleConfigurationParams{

		Context: ctx,
	}
}

// NewUpdateScopeRuleConfigurationParamsWithHTTPClient creates a new UpdateScopeRuleConfigurationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateScopeRuleConfigurationParamsWithHTTPClient(client *http.Client) *UpdateScopeRuleConfigurationParams {
	var ()
	return &UpdateScopeRuleConfigurationParams{
		HTTPClient: client,
	}
}

/*UpdateScopeRuleConfigurationParams contains all the parameters to send to the API endpoint
for the update scope rule configuration operation typically these are written to a http.Request
*/
type UpdateScopeRuleConfigurationParams struct {

	/*Body*/
	Body *models.CdnUpdateScopeRuleConfigurationRequest
	/*RuleID*/
	RuleID string
	/*ScopeID*/
	ScopeID string
	/*SiteID*/
	SiteID string
	/*StackID*/
	StackID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) WithTimeout(timeout time.Duration) *UpdateScopeRuleConfigurationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) WithContext(ctx context.Context) *UpdateScopeRuleConfigurationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) WithHTTPClient(client *http.Client) *UpdateScopeRuleConfigurationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) WithBody(body *models.CdnUpdateScopeRuleConfigurationRequest) *UpdateScopeRuleConfigurationParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) SetBody(body *models.CdnUpdateScopeRuleConfigurationRequest) {
	o.Body = body
}

// WithRuleID adds the ruleID to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) WithRuleID(ruleID string) *UpdateScopeRuleConfigurationParams {
	o.SetRuleID(ruleID)
	return o
}

// SetRuleID adds the ruleId to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) SetRuleID(ruleID string) {
	o.RuleID = ruleID
}

// WithScopeID adds the scopeID to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) WithScopeID(scopeID string) *UpdateScopeRuleConfigurationParams {
	o.SetScopeID(scopeID)
	return o
}

// SetScopeID adds the scopeId to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) SetScopeID(scopeID string) {
	o.ScopeID = scopeID
}

// WithSiteID adds the siteID to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) WithSiteID(siteID string) *UpdateScopeRuleConfigurationParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) SetSiteID(siteID string) {
	o.SiteID = siteID
}

// WithStackID adds the stackID to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) WithStackID(stackID string) *UpdateScopeRuleConfigurationParams {
	o.SetStackID(stackID)
	return o
}

// SetStackID adds the stackId to the update scope rule configuration params
func (o *UpdateScopeRuleConfigurationParams) SetStackID(stackID string) {
	o.StackID = stackID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateScopeRuleConfigurationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param rule_id
	if err := r.SetPathParam("rule_id", o.RuleID); err != nil {
		return err
	}

	// path param scope_id
	if err := r.SetPathParam("scope_id", o.ScopeID); err != nil {
		return err
	}

	// path param site_id
	if err := r.SetPathParam("site_id", o.SiteID); err != nil {
		return err
	}

	// path param stack_id
	if err := r.SetPathParam("stack_id", o.StackID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
