// Code generated by go-swagger; DO NOT EDIT.

package cdn

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renderinc/stackpath-cdn-go/models"
)

// UpdateCertificateReader is a Reader for the UpdateCertificate structure.
type UpdateCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateCertificateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateCertificateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateCertificateOK creates a UpdateCertificateOK with default headers values
func NewUpdateCertificateOK() *UpdateCertificateOK {
	return &UpdateCertificateOK{}
}

/* UpdateCertificateOK describes a response with status code 200, with default header values.

UpdateCertificateOK update certificate o k
*/
type UpdateCertificateOK struct {
	Payload *models.CdnUpdateCertificateResponse
}

func (o *UpdateCertificateOK) Error() string {
	return fmt.Sprintf("[PUT /cdn/v1/stacks/{stack_id}/certificates/{certificate_id}][%d] updateCertificateOK  %+v", 200, o.Payload)
}
func (o *UpdateCertificateOK) GetPayload() *models.CdnUpdateCertificateResponse {
	return o.Payload
}

func (o *UpdateCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CdnUpdateCertificateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCertificateUnauthorized creates a UpdateCertificateUnauthorized with default headers values
func NewUpdateCertificateUnauthorized() *UpdateCertificateUnauthorized {
	return &UpdateCertificateUnauthorized{}
}

/* UpdateCertificateUnauthorized describes a response with status code 401, with default header values.

Returned when an unauthorized request is attempted.
*/
type UpdateCertificateUnauthorized struct {
	Payload *models.APIStatus
}

func (o *UpdateCertificateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /cdn/v1/stacks/{stack_id}/certificates/{certificate_id}][%d] updateCertificateUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateCertificateUnauthorized) GetPayload() *models.APIStatus {
	return o.Payload
}

func (o *UpdateCertificateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCertificateInternalServerError creates a UpdateCertificateInternalServerError with default headers values
func NewUpdateCertificateInternalServerError() *UpdateCertificateInternalServerError {
	return &UpdateCertificateInternalServerError{}
}

/* UpdateCertificateInternalServerError describes a response with status code 500, with default header values.

Internal server error.
*/
type UpdateCertificateInternalServerError struct {
	Payload *models.APIStatus
}

func (o *UpdateCertificateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /cdn/v1/stacks/{stack_id}/certificates/{certificate_id}][%d] updateCertificateInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateCertificateInternalServerError) GetPayload() *models.APIStatus {
	return o.Payload
}

func (o *UpdateCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCertificateDefault creates a UpdateCertificateDefault with default headers values
func NewUpdateCertificateDefault(code int) *UpdateCertificateDefault {
	return &UpdateCertificateDefault{
		_statusCode: code,
	}
}

/* UpdateCertificateDefault describes a response with status code -1, with default header values.

Default error structure.
*/
type UpdateCertificateDefault struct {
	_statusCode int

	Payload *models.APIStatus
}

// Code gets the status code for the update certificate default response
func (o *UpdateCertificateDefault) Code() int {
	return o._statusCode
}

func (o *UpdateCertificateDefault) Error() string {
	return fmt.Sprintf("[PUT /cdn/v1/stacks/{stack_id}/certificates/{certificate_id}][%d] UpdateCertificate default  %+v", o._statusCode, o.Payload)
}
func (o *UpdateCertificateDefault) GetPayload() *models.APIStatus {
	return o.Payload
}

func (o *UpdateCertificateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
