{
  "swagger": "2.0",
  "info": {
    "title": "StackPath CDN API",
    "version": "1.0",
    "contact": {
      "name": "StackPath Support",
      "url": "https://support.stackpath.com/"
    }
  },
  "host": "gateway.stackpath.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/cdn/v1/origins/scan": {
      "post": {
        "summary": "ScanOrigin returns information regarding an origin, such as its IP address,\nand whether or not it supports SSL.",
        "operationId": "ScanOrigin",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnScanOriginResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnScanOriginRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/pops": {
      "get": {
        "summary": "GetPops returns the list of available pops.",
        "operationId": "GetPops",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetPopsResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/pops/closest": {
      "get": {
        "summary": "GetPops returns the list of available pops.",
        "description": "Performs a scan and returns the Pop with the fastest response.",
        "operationId": "GetClosestPop",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetClosestPopResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/certificates": {
      "get": {
        "summary": "GetCertificates returns certificates in the stack",
        "operationId": "GetCertificates",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetCertificatesResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_request.first",
            "description": "first is the number of items desired.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.after",
            "description": "after is the cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.filter",
            "description": "filter will accept sql style constraints.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.sort_by",
            "description": "sort_by will sort the response by the given field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "post": {
        "summary": "CreateCertificate creates a certificate in the stack. The certificate will\nautomatically be associated with scope hostnames which are contained in either\nthe subject or the alternative names in the certificate.",
        "operationId": "CreateCertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnCreateCertificateResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnCreateCertificateRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/certificates/{certificate_id}": {
      "get": {
        "summary": "GetCertificate returns a certificate",
        "operationId": "GetCertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetCertificateResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "delete": {
        "summary": "DeleteCertificate deletes a certificate from the stack",
        "operationId": "DeleteCertificate",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "put": {
        "summary": "UpdateCertificate updates a certificate. This can be used for providing\nupdated certificate or key information.",
        "operationId": "UpdateCertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnUpdateCertificateResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnUpdateCertificateRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/certificates/{certificate_id}/renew": {
      "post": {
        "summary": "RenewCertificate will start a certificate renewal process",
        "operationId": "RenewCertificate",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/certificates/{certificate_id}/sites": {
      "get": {
        "summary": "GetCertificateSites returns the sites which are implicitly associated with a certificate",
        "operationId": "GetCertificateSites",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetCertificateSitesResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_request.first",
            "description": "first is the number of items desired.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.after",
            "description": "after is the cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.filter",
            "description": "filter will accept sql style constraints.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.sort_by",
            "description": "sort_by will sort the response by the given field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/certificates/{certificate_id}/verification_details": {
      "get": {
        "summary": "GetCertificateVerificationDetails will return whether the requested certificate requires\nmanual verification, and the details necessary for providing that verification.",
        "operationId": "GetCertificateVerificationDetails",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetCertificateVerificationDetailsResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/metrics": {
      "get": {
        "summary": "GetMetrics returns metrics for sites in the stack",
        "operationId": "GetMetrics",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetMetricsResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start_date",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "end_date",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "granularity",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AUTO",
              "P1M",
              "PT5M",
              "PT1H",
              "P1D"
            ],
            "default": "AUTO"
          },
          {
            "name": "platforms",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pops",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billing_regions",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sites",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "group_by",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NONE",
              "ACCOUNT",
              "SITE",
              "PLATFORM",
              "POP",
              "REGION"
            ],
            "default": "NONE"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/origins": {
      "get": {
        "summary": "GetOrigins returns the origins in the stack",
        "operationId": "GetOrigins",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetOriginsResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_request.first",
            "description": "first is the number of items desired.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.after",
            "description": "after is the cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.filter",
            "description": "filter will accept sql style constraints.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.sort_by",
            "description": "sort_by will sort the response by the given field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/origins/{origin_id}": {
      "get": {
        "summary": "GetOrigin returns an origin",
        "operationId": "GetOrigin",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetOriginResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "patch": {
        "summary": "UpdateOrigin updates an origin, allowing for changes to paths, hostnames, and ports.",
        "operationId": "UpdateOrigin",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnUpdateOriginResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnUpdateOriginRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/purge": {
      "post": {
        "summary": "PurgeContent purges content from the CDN. A purge ID is returned,\nwhich can be used in calls to get the purge status at `/cdn/v1/stacks/{stack_id}/purge/{purge_id}`",
        "operationId": "PurgeContent",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnPurgeContentResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnPurgeContentRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/purge/{purge_id}": {
      "get": {
        "summary": "GetPurgeStatus returns the status of a purge request",
        "operationId": "GetPurgeStatus",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetPurgeStatusResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "purge_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites": {
      "get": {
        "summary": "GetSites returns sites in the stack",
        "operationId": "GetSites",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetSitesResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_request.first",
            "description": "first is the number of items desired.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.after",
            "description": "after is the cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.filter",
            "description": "filter will accept sql style constraints.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.sort_by",
            "description": "sort_by will sort the response by the given field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "post": {
        "summary": "CreateSite will create a Site",
        "operationId": "CreateSite",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnCreateSiteResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnCreateSiteRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}": {
      "get": {
        "summary": "GetSite returns a Site",
        "operationId": "GetSite",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetSiteResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "delete": {
        "summary": "DeleteSite will delete a site",
        "operationId": "DeleteSite",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates": {
      "get": {
        "summary": "GetSiteCertificates returns certificates which are implicity associated with a site",
        "operationId": "GetSiteCertificates",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetSiteCertificatesResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_request.first",
            "description": "first is the number of items desired.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.after",
            "description": "after is the cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.filter",
            "description": "filter will accept sql style constraints.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.sort_by",
            "description": "sort_by will sort the response by the given field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates/request": {
      "post": {
        "summary": "RequestCertificate creates a new certificate for a site.  The optional list of hosts\nshould be delivery domains for the site.  If no hosts parameter is provided all delivery\ndomains for a site will be included in the SAN field.  If the hosts parameter is provided\nthe first entry in the list will be used as the certificate common name.",
        "operationId": "RequestCertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnRequestCertificateResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnRequestCertificateRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/certificates/{certificate_id}": {
      "put": {
        "summary": "ConnectSiteToCertificate will associate a site with a certificate, without\nvalidating if the site has a hostname covered by the certificate. This is\nuseful for preparation work required for getting a site ready for traffic.\nIf a certificate is uploaded which contains hostnames for sites, it will\nautomatically be connected to those sites. If a hostname is added to a\nsite which is covered by an SSL certificate, it will automatically be\nconnected to the certificate.",
        "operationId": "ConnectSiteToCertificate",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnConnectSiteToCertificateResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "certificate_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/disable": {
      "post": {
        "summary": "DisableSite disables site delivery, can be reversed via a call to enable",
        "operationId": "DisableSite",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/dns/targets": {
      "get": {
        "summary": "GetSiteDnsTargets returns a set of DNS addresses that can be used for requests to the site",
        "operationId": "GetSiteDnsTargets",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetSiteDnsTargetsResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/enable": {
      "post": {
        "summary": "EnableSite re-enables delivery on a site",
        "operationId": "EnableSite",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes": {
      "get": {
        "summary": "GetSiteScopes returns the scopes for a site",
        "operationId": "GetSiteScopes",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetSiteScopesResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_request.first",
            "description": "first is the number of items desired.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.after",
            "description": "after is the cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.filter",
            "description": "filter will accept sql style constraints.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.sort_by",
            "description": "sort_by will sort the response by the given field.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "disable_transparent_mode",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-omitempty": false,
            "format": "boolean"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "post": {
        "summary": "CreateScope creates a new configuration scope",
        "operationId": "CreateScope",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnCreateScopeResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnCreateScopeRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}": {
      "delete": {
        "summary": "DeleteScope deletes a scope",
        "operationId": "DeleteScope",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/configuration": {
      "get": {
        "summary": "GetScopeConfiguration returns the configuration for a scope",
        "operationId": "GetScopeConfiguration",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetScopeConfigurationResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "patch": {
        "summary": "UpdateScopeConfiguration updates the configuration for a scope",
        "operationId": "UpdateScopeConfiguration",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnUpdateScopeConfigurationResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnUpdateScopeConfigurationRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/hostnames": {
      "get": {
        "summary": "GetScopeHostnames returns the hostnames configured for a scope. These\nhostnames allow the CDN to recognize an HTTP request and associate it\nwith a site.",
        "operationId": "GetScopeHostnames",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetScopeHostnamesResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_request.first",
            "description": "first is the number of items desired.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.after",
            "description": "after is the cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.filter",
            "description": "filter will accept sql style constraints.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.sort_by",
            "description": "sort_by will sort the response by the given field.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "disable_transparent_mode",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-omitempty": false,
            "format": "boolean"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "post": {
        "summary": "CreateScopeHostname creates a hostname on a scope.",
        "operationId": "CreateScopeHostname",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnCreateScopeHostnameResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnCreateScopeHostnameRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/hostnames/{domain}": {
      "delete": {
        "summary": "DeleteScopeHostname deletes a hostname from a scope",
        "operationId": "DeleteScopeHostname",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "disable_transparent_mode",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-omitempty": false,
            "format": "boolean"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/origins": {
      "get": {
        "summary": "GetScopeOrigins returns the origins associated with a scope.",
        "operationId": "GetScopeOrigins",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetScopeOriginsResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_request.first",
            "description": "first is the number of items desired.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.after",
            "description": "after is the cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.filter",
            "description": "filter will accept sql style constraints.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.sort_by",
            "description": "sort_by will sort the response by the given field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "post": {
        "summary": "ConnectScopeToOrigin will connect a scope with an origin, creating the\norigin if necessary. When the request contains a priority which an origin\nalready associated with the scope has set, the existing origin will be\ndisconnected. The priority of an origin already associated with a scope\ncan be modified via this endpoint.",
        "operationId": "ConnectScopeToOrigin",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnConnectScopeToOriginResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnConnectScopeToOriginRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/origins/{origin_id}": {
      "delete": {
        "summary": "DisconnectScopeFromOrigin will disconnect a scope from an origin.",
        "operationId": "DisconnectScopeFromOrigin",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/rules": {
      "get": {
        "summary": "GetScopeRules returns the rules for a scope",
        "operationId": "GetScopeRules",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetScopeRulesResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_request.first",
            "description": "first is the number of items desired.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.after",
            "description": "after is the cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.filter",
            "description": "filter will accept sql style constraints.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.sort_by",
            "description": "sort_by will sort the response by the given field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "post": {
        "summary": "CreateScopeRule creates a new rule in a scope",
        "operationId": "CreateScopeRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnCreateScopeRuleResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnCreateScopeRuleRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/rules/{rule_id}": {
      "get": {
        "summary": "GetScopeRule returns a rule in a scope",
        "operationId": "GetScopeRule",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetScopeRuleResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "delete": {
        "summary": "DeleteScopeRule deletes a scope rule",
        "operationId": "DeleteScopeRule",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scopes/{scope_id}/rules/{rule_id}/configuration": {
      "get": {
        "summary": "GetScopeRuleConfiguration returns the configuration for a scope rule",
        "operationId": "GetScopeRuleConfiguration",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetScopeRuleConfigurationResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "patch": {
        "summary": "UpdateScopeRuleConfiguration updates the configuration for a scope rule",
        "operationId": "UpdateScopeRuleConfiguration",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnUpdateScopeRuleConfigurationResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnUpdateScopeRuleConfigurationRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scripts": {
      "get": {
        "summary": "GetSiteScripts gets a paginated list of scripts for a site",
        "operationId": "GetSiteScripts",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetSiteScriptsResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_request.first",
            "description": "first is the number of items desired.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.after",
            "description": "after is the cursor value after which data will be returned.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.filter",
            "description": "filter will accept sql style constraints.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_request.sort_by",
            "description": "sort_by will sort the response by the given field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "post": {
        "summary": "CreateSiteScript creates an edge script for a site",
        "operationId": "CreateSiteScript",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnCreateSiteScriptResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnCreateSiteScriptRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scripts/{script_id}": {
      "get": {
        "summary": "GetSiteScript gets a single script for a site.",
        "operationId": "GetSiteScript",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetSiteScriptResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "script_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "script_version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "delete": {
        "summary": "DeleteSiteScript delete an edge script for a site",
        "operationId": "DeleteSiteScript",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "script_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      },
      "patch": {
        "summary": "UpdateSiteScript updates the code or paths of a script. If the code is changed a new version will be created",
        "operationId": "UpdateSiteScript",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnUpdateSiteScriptResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "script_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/cdnUpdateSiteScriptRequest"
            }
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    },
    "/cdn/v1/stacks/{stack_id}/sites/{site_id}/scripts/{script_id}/{script_version}": {
      "get": {
        "summary": "GetSiteScript gets a single script for a site.",
        "operationId": "GetSiteScript2",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/cdnGetSiteScriptResponse"
            }
          },
          "401": {
            "description": "Returned when an unauthorized request is attempted.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          },
          "default": {
            "description": "Default error structure.",
            "schema": {
              "$ref": "#/definitions/apiStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stack_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "site_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "script_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "script_version",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cdn"
        ]
      }
    }
  },
  "definitions": {
    "AuthACLAccessCodeEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "allow",
        "deny"
      ],
      "default": "UNKNOWN"
    },
    "AuthACLClientIPSrcEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "socket",
        "header"
      ],
      "default": "UNKNOWN"
    },
    "AuthGeoCodeEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "countryCode",
        "region",
        "subdivisionCodes",
        "city",
        "postalCode",
        "continentCode",
        "timeZone",
        "dmaCode",
        "areaCode"
      ],
      "default": "UNKNOWN"
    },
    "AuthUrlSignAKv2HashStrategyEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "sha1",
        "sha256",
        "md5"
      ],
      "default": "UNKNOWN"
    },
    "AuthUrlSignL3TimeFormatEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "epoch",
        "datetime"
      ],
      "default": "UNKNOWN"
    },
    "AwsSignedOriginPullV4AuthenticationTypeEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "query",
        "header"
      ],
      "default": "UNKNOWN"
    },
    "BandWidthRateLimitUnitsInitialEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "byte",
        "kilobyte"
      ],
      "default": "UNKNOWN"
    },
    "BandWidthRateLimitUnitsSustainedEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "kilobit",
        "kilobyte"
      ],
      "default": "UNKNOWN"
    },
    "BandwidthRateLimitInitialBurstUnitsEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "byte",
        "kilobyte"
      ],
      "default": "UNKNOWN"
    },
    "BandwidthRateLimitSustainedRateUnitsEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "kilobit",
        "kilobyte"
      ],
      "default": "UNKNOWN"
    },
    "BillableRegionsEnabledRegionsEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "us",
        "eu",
        "sa",
        "as",
        "oc"
      ],
      "default": "UNKNOWN"
    },
    "ClientRequestQueueIpListAccessCodeEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "allow",
        "deny"
      ],
      "default": "UNKNOWN"
    },
    "ContentDispositionByHeaderDefaultTypeEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "attachment",
        "inline"
      ],
      "default": "UNKNOWN"
    },
    "DnsOverrideTypeEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "A",
        "AAAA",
        "CNAME"
      ],
      "default": "UNKNOWN"
    },
    "FileSegmentationInitialOriginRequestBehaviorEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "range",
        "full"
      ],
      "default": "UNKNOWN"
    },
    "GetMetricsRequestMetricsGranularity": {
      "type": "string",
      "enum": [
        "AUTO",
        "P1M",
        "PT5M",
        "PT1H",
        "P1D"
      ],
      "default": "AUTO"
    },
    "GetMetricsRequestMetricsGroupBy": {
      "type": "string",
      "enum": [
        "NONE",
        "ACCOUNT",
        "SITE",
        "PLATFORM",
        "POP",
        "REGION"
      ],
      "default": "NONE"
    },
    "GetMetricsResponseMetricSample": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "GetMetricsResponseMetricSeries": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "metrics": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "samples": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetMetricsResponseMetricSample"
          }
        }
      }
    },
    "HashTypeClassEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "HOST",
        "MEDIA"
      ],
      "default": "UNKNOWN"
    },
    "MidTierCachingRequestFormatEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "internal",
        "external"
      ],
      "default": "UNKNOWN"
    },
    "OriginPullDefaultBehaviorEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "dedup",
        "nocache",
        "nostore"
      ],
      "default": "UNKNOWN"
    },
    "OriginPullPolicyExpirePolicyEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CACHE_CONTROL",
        "INGEST",
        "LAST_MODIFY",
        "NEVER_EXPIRE",
        "DO_NOT_CACHE"
      ],
      "default": "UNKNOWN"
    },
    "OriginPullPolicyNoCacheBehaviorEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "legacy",
        "spec"
      ],
      "default": "UNKNOWN"
    },
    "OriginPullRedirectActionEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "follow",
        "proxy"
      ],
      "default": "UNKNOWN"
    },
    "OriginPullShieldBehaviorEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "redirect",
        "tlb"
      ],
      "default": "UNKNOWN"
    },
    "OriginPullShieldPermissibleShieldInternalErrorsEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "NONE",
        "CONNECTION_ONLY",
        "WRITE_ONLY",
        "WRITE_READ",
        "ALL"
      ],
      "default": "UNKNOWN"
    },
    "PurgeContentRequestItem": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "recursive": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "invalidateOnly": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "purgeAllDynamic": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "headers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "purgeSelector": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurgeContentRequestPurgeSelector"
          }
        }
      }
    },
    "PurgeContentRequestPurgeSelector": {
      "type": "object",
      "properties": {
        "selectorType": {
          "$ref": "#/definitions/PurgeContentRequestPurgeSelectorType"
        },
        "selectorName": {
          "type": "string"
        },
        "selectorValue": {
          "type": "string"
        },
        "selectorValueDelimiter": {
          "type": "string"
        }
      }
    },
    "PurgeContentRequestPurgeSelectorType": {
      "type": "string",
      "enum": [
        "HEADER",
        "TAG"
      ],
      "default": "HEADER"
    },
    "RequestFilterUrlInputEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "FULL_URL",
        "FULL_FILE_PATH",
        "FULL_FILE_PATH_LEGACY"
      ],
      "default": "UNKNOWN"
    },
    "ScanOriginResponseOriginScanSSLDetails": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "SiteTypeValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CDN",
        "WAF",
        "API"
      ],
      "default": "UNKNOWN"
    },
    "TypeEnum": {
      "type": "string",
      "enum": [
        "CDN",
        "WAF",
        "API"
      ],
      "default": "CDN"
    },
    "apiStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "error": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiStatusDetail"
          }
        }
      }
    },
    "apiStatusDetail": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "required": [
        "@type"
      ],
      "discriminator": "@type"
    },
    "cdnCertificate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "fingerprint": {
          "type": "string"
        },
        "commonName": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        },
        "caBundle": {
          "type": "string"
        },
        "trusted": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "expirationDate": {
          "type": "string",
          "format": "date-time"
        },
        "createDate": {
          "type": "string",
          "format": "date-time"
        },
        "updateDate": {
          "type": "string",
          "format": "date-time"
        },
        "subjectAlternativeNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/cdnCertificateStatus"
        },
        "providerManaged": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "title": "Whether a certificate is managed by StackPath or the end user"
        }
      }
    },
    "cdnCertificateStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "PENDING",
        "EXPIRED",
        "FAILED",
        "PENDING_VERIFICATION",
        "ACTIVE",
        "INACTIVE"
      ],
      "default": "UNKNOWN",
      "description": " - UNKNOWN: UNKNOWN is the default value if no other value has been defined.\n - PENDING: PENDING is the initial value that a certificate request is created in before provisioning.\n - EXPIRED: EXPIRED is for a certificate that has exceeded its expiration date.\n - FAILED: FAILED is used for requested certificates that have had an error during provisioning.\n - PENDING_VERIFICATION: PENDING_VERIFICATION is used during a certificate request where verification of ownership of the requested domains is still pending.\n - ACTIVE: ACTIVE is for a certificate that is currently valid and in use by one or more hosts.\n - INACTIVE: INACTIVE is for a certificate that is currently valid but not in use by any hosts."
    },
    "cdnConnectScopeToOriginRequest": {
      "type": "object",
      "properties": {
        "origin": {
          "$ref": "#/definitions/cdnConnectScopeToOriginRequestOrigin"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "originId": {
          "type": "string"
        }
      }
    },
    "cdnConnectScopeToOriginRequestOrigin": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "securePort": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "cdnConnectScopeToOriginResponse": {
      "type": "object",
      "properties": {
        "scopeOrigin": {
          "$ref": "#/definitions/cdnScopeOrigin"
        }
      }
    },
    "cdnConnectSiteToCertificateResponse": {
      "type": "object",
      "properties": {
        "siteCertificate": {
          "$ref": "#/definitions/cdnSiteCertificate"
        }
      }
    },
    "cdnCreateCertificateRequest": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "caBundle": {
          "type": "string"
        }
      }
    },
    "cdnCreateCertificateResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/cdnCertificate"
        }
      }
    },
    "cdnCreateScopeHostnameRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        },
        "disableTransparentMode": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      }
    },
    "cdnCreateScopeHostnameResponse": {
      "type": "object",
      "properties": {
        "hostname": {
          "$ref": "#/definitions/cdnHostname"
        }
      }
    },
    "cdnCreateScopeRequest": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        }
      }
    },
    "cdnCreateScopeResponse": {
      "type": "object",
      "properties": {
        "scope": {
          "$ref": "#/definitions/cdnScope"
        }
      }
    },
    "cdnCreateScopeRuleRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "configuration": {
          "$ref": "#/definitions/custconfConfiguration"
        }
      }
    },
    "cdnCreateScopeRuleResponse": {
      "type": "object",
      "properties": {
        "rule": {
          "$ref": "#/definitions/cdnScopeRule"
        },
        "configuration": {
          "$ref": "#/definitions/custconfConfiguration"
        }
      }
    },
    "cdnCreateSiteRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        },
        "origin": {
          "$ref": "#/definitions/cdnCreateSiteRequestOrigin"
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnCreateSiteRequestFeature"
          }
        },
        "type": {
          "$ref": "#/definitions/TypeEnum"
        },
        "configuration": {
          "$ref": "#/definitions/custconfConfiguration"
        }
      },
      "title": "CreateSiteRequest will be used to create a site"
    },
    "cdnCreateSiteRequestFeature": {
      "type": "string",
      "enum": [
        "CDN",
        "WAF"
      ],
      "default": "CDN"
    },
    "cdnCreateSiteRequestOrigin": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "securePort": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "cdnCreateSiteResponse": {
      "type": "object",
      "properties": {
        "site": {
          "$ref": "#/definitions/cdnSite"
        }
      },
      "title": "CreateSiteResponse returns the created site"
    },
    "cdnCreateSiteScriptRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string",
          "format": "byte"
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "cdnCreateSiteScriptResponse": {
      "type": "object",
      "properties": {
        "script": {
          "$ref": "#/definitions/cdnSiteScript"
        }
      }
    },
    "cdnDnsVerificationDetails": {
      "type": "object",
      "properties": {
        "dnsRecords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "cdnGetCertificateResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/cdnCertificate"
        }
      }
    },
    "cdnGetCertificateSitesResponse": {
      "type": "object",
      "properties": {
        "pageInfo": {
          "$ref": "#/definitions/paginationPageInfo"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnSite"
          }
        }
      }
    },
    "cdnGetCertificateVerificationDetailsResponse": {
      "type": "object",
      "properties": {
        "manualVerificationRequired": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "verificationRequirements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnVerificationRequirements"
          }
        }
      }
    },
    "cdnGetCertificatesResponse": {
      "type": "object",
      "properties": {
        "pageInfo": {
          "$ref": "#/definitions/paginationPageInfo"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnCertificate"
          }
        }
      }
    },
    "cdnGetClosestPopResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/cdnPopScanReport"
        }
      }
    },
    "cdnGetMetricsResponse": {
      "type": "object",
      "properties": {
        "series": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetMetricsResponseMetricSeries"
          }
        }
      }
    },
    "cdnGetOriginResponse": {
      "type": "object",
      "properties": {
        "origin": {
          "$ref": "#/definitions/schemacdnOrigin"
        }
      }
    },
    "cdnGetOriginsResponse": {
      "type": "object",
      "properties": {
        "pageInfo": {
          "$ref": "#/definitions/paginationPageInfo"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/schemacdnOrigin"
          }
        }
      }
    },
    "cdnGetPopsResponse": {
      "type": "object",
      "properties": {
        "pageInfo": {
          "$ref": "#/definitions/paginationPageInfo"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnPop"
          }
        }
      }
    },
    "cdnGetPurgeStatusResponse": {
      "type": "object",
      "properties": {
        "progress": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "cdnGetScopeConfigurationResponse": {
      "type": "object",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/custconfConfiguration"
        }
      }
    },
    "cdnGetScopeHostnamesResponse": {
      "type": "object",
      "properties": {
        "pageInfo": {
          "$ref": "#/definitions/paginationPageInfo"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnHostname"
          }
        }
      }
    },
    "cdnGetScopeOriginsResponse": {
      "type": "object",
      "properties": {
        "pageInfo": {
          "$ref": "#/definitions/paginationPageInfo"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnScopeOrigin"
          }
        }
      }
    },
    "cdnGetScopeRuleConfigurationResponse": {
      "type": "object",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/custconfConfiguration"
        }
      }
    },
    "cdnGetScopeRuleResponse": {
      "type": "object",
      "properties": {
        "rule": {
          "$ref": "#/definitions/cdnScopeRule"
        }
      }
    },
    "cdnGetScopeRulesResponse": {
      "type": "object",
      "properties": {
        "pageInfo": {
          "$ref": "#/definitions/paginationPageInfo"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnScopeRule"
          }
        }
      }
    },
    "cdnGetSiteCertificatesResponse": {
      "type": "object",
      "properties": {
        "pageInfo": {
          "$ref": "#/definitions/paginationPageInfo"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnSiteCertificate"
          }
        }
      }
    },
    "cdnGetSiteDnsTargetsResponse": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "cdnGetSiteResponse": {
      "type": "object",
      "properties": {
        "site": {
          "$ref": "#/definitions/cdnSite"
        }
      }
    },
    "cdnGetSiteScopesResponse": {
      "type": "object",
      "properties": {
        "pageInfo": {
          "$ref": "#/definitions/paginationPageInfo"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnScope"
          }
        }
      }
    },
    "cdnGetSiteScriptResponse": {
      "type": "object",
      "properties": {
        "script": {
          "$ref": "#/definitions/cdnSiteScript"
        }
      }
    },
    "cdnGetSiteScriptsResponse": {
      "type": "object",
      "properties": {
        "pageInfo": {
          "$ref": "#/definitions/paginationPageInfo"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnSiteScript"
          }
        }
      }
    },
    "cdnGetSitesResponse": {
      "type": "object",
      "properties": {
        "pageInfo": {
          "$ref": "#/definitions/paginationPageInfo"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnSite"
          }
        }
      }
    },
    "cdnHostname": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        }
      }
    },
    "cdnPop": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "latitude": {
          "type": "number",
          "format": "float"
        },
        "longitude": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "cdnPopScanReport": {
      "type": "object",
      "properties": {
        "popCode": {
          "type": "string"
        },
        "connectMs": {
          "type": "number",
          "format": "float"
        },
        "dnsMs": {
          "type": "number",
          "format": "float"
        },
        "downloadMs": {
          "type": "number",
          "format": "float"
        },
        "firstByteMs": {
          "type": "number",
          "format": "float"
        },
        "sslMs": {
          "type": "number",
          "format": "float"
        },
        "totalMs": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "cdnPurgeContentRequest": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurgeContentRequestItem"
          }
        }
      }
    },
    "cdnPurgeContentResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "cdnRequestCertificateRequest": {
      "type": "object",
      "properties": {
        "hosts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "cdnRequestCertificateResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/cdnCertificate"
        },
        "verificationRequirements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnVerificationRequirements"
          }
        }
      }
    },
    "cdnScanOriginRequest": {
      "type": "object",
      "properties": {
        "domain": {
          "type": "string"
        }
      }
    },
    "cdnScanOriginResponse": {
      "type": "object",
      "properties": {
        "ipAddress": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "sslDetails": {
          "$ref": "#/definitions/ScanOriginResponseOriginScanSSLDetails"
        },
        "domainInUse": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      }
    },
    "cdnScope": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "cdnScopeOrigin": {
      "type": "object",
      "properties": {
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "origin": {
          "$ref": "#/definitions/schemacdnOrigin"
        }
      }
    },
    "cdnScopeRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "cdnSite": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "stackId": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cdnSiteFeature"
          }
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "type": {
          "$ref": "#/definitions/SiteTypeValue"
        }
      }
    },
    "cdnSiteCertificate": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "valid will be true when a hostname associated with the site is covered\nby the certificate, otherwise the value will be false."
        },
        "certificate": {
          "$ref": "#/definitions/cdnCertificate"
        }
      }
    },
    "cdnSiteFeature": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CDN",
        "WAF"
      ],
      "default": "UNKNOWN"
    },
    "cdnSiteScript": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "code": {
          "type": "string",
          "format": "byte"
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "cdnUpdateCertificateRequest": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "caBundle": {
          "type": "string"
        }
      }
    },
    "cdnUpdateCertificateResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "$ref": "#/definitions/cdnCertificate"
        }
      }
    },
    "cdnUpdateOriginRequest": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "securePort": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "UpdateOriginRequest will update an origin with the specified settings.\nTo remove a port or secure_port, set their values to zero."
    },
    "cdnUpdateOriginResponse": {
      "type": "object",
      "properties": {
        "origin": {
          "$ref": "#/definitions/schemacdnOrigin"
        }
      }
    },
    "cdnUpdateScopeConfigurationRequest": {
      "type": "object",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/custconfConfiguration"
        }
      }
    },
    "cdnUpdateScopeConfigurationResponse": {
      "type": "object",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/custconfConfiguration"
        }
      }
    },
    "cdnUpdateScopeRuleConfigurationRequest": {
      "type": "object",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/custconfConfiguration"
        }
      }
    },
    "cdnUpdateScopeRuleConfigurationResponse": {
      "type": "object",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/custconfConfiguration"
        }
      }
    },
    "cdnUpdateSiteScriptRequest": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "format": "byte"
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "cdnUpdateSiteScriptResponse": {
      "type": "object",
      "properties": {
        "script": {
          "$ref": "#/definitions/cdnSiteScript"
        }
      }
    },
    "cdnVerificationRequirements": {
      "type": "object",
      "properties": {
        "dnsVerificationDetails": {
          "$ref": "#/definitions/cdnDnsVerificationDetails"
        }
      }
    },
    "cdncustconfOrigin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "host": {
          "type": "string"
        },
        "maxConnections": {
          "type": "number",
          "format": "int64"
        },
        "originPullNegLinger": {
          "type": "number",
          "format": "int64"
        },
        "originPullRetries": {
          "type": "number",
          "format": "int64"
        },
        "originDefaultKeepAlive": {
          "type": "number",
          "format": "int64"
        },
        "originTimeoutDuration": {
          "type": "number",
          "format": "int64"
        },
        "readTimeoutSecs": {
          "type": "number",
          "format": "int64",
          "description": "Overrides the default time to wait when reading an origin's response."
        },
        "writeTimeoutSecs": {
          "type": "number",
          "format": "int64",
          "description": "Overrides the default time to wait when writing/sending an origin request."
        },
        "dnsTimeoutSecs": {
          "type": "number",
          "format": "int64",
          "description": "Overrides the default time to wait when resolving this origin's hostname to\nan IP address."
        },
        "maximumOriginPullSeconds": {
          "type": "integer",
          "format": "int32"
        },
        "originPullHeaders": {
          "type": "string",
          "description": "String of values deliminated by a '|' character."
        },
        "originCacheHeaders": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "cachedHeadersOverride": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. Overrides the default\nsetting for what headers to cache from an origin unless an\nOriginPullPolicy/CachedHeadersOverride policy has been configured for the\nsame or lower, applicable scope."
        },
        "verifyCertificate": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "title": "Enable Cert Verification while doing SSL OriginPull"
        },
        "certificateCN": {
          "type": "string"
        },
        "penaltyBoxErrorCountTrigger": {
          "type": "number",
          "format": "int64"
        },
        "penaltyBoxErrorWindowSeconds": {
          "type": "number",
          "format": "int64"
        },
        "penaltyBoxMaximumResponseSeconds": {
          "type": "number",
          "format": "int64"
        },
        "penaltyBoxQualifyingStatusCodes": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "penaltyBoxTestPathOverride": {
          "type": "string"
        },
        "maxRequestsPerConnection": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "custconfAccessLogIpObfuscation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "Enable/Disable IP address obfuscation in access logs for GDPR compliance."
    },
    "custconfAccessLogger": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "expireTimeHCS": {
          "type": "number",
          "format": "int64"
        },
        "expireTimeLocal": {
          "type": "number",
          "format": "int64"
        },
        "enableCompression": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "uploadToHCS": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "title": "Global settings that AccessLogger uses when storing access logs, origin pull\nlogs and receipt logs"
    },
    "custconfAccessLogs": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "title": "Enable/Disable access logs"
    },
    "custconfAccessLogsConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "extraLogFields": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "title": "Access log settings"
    },
    "custconfAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "parents": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "title": "Account Representation"
    },
    "custconfAuthACL": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "accessCode": {
          "$ref": "#/definitions/AuthACLAccessCodeEnumWrapperValue"
        },
        "ipList": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. This is a list of IP\naddresses considered for this policy."
        },
        "protocol": {
          "$ref": "#/definitions/custconfAuthACLProtocolEnumWrapperValue"
        },
        "clientIPSrc": {
          "$ref": "#/definitions/AuthACLClientIPSrcEnumWrapperValue"
        },
        "header": {
          "type": "string",
          "description": "This allows you to specify the name of a HTTP request header which will\ncontain the client IP address to use for this policy."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "IP address restrictions allow you to configure your CDN container to grant or\ndeny a specific IP addresses or range of IP addresses from accessing content\ncached in a directory in your CDN container."
    },
    "custconfAuthACLProtocolEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "http",
        "https",
        "both"
      ],
      "default": "UNKNOWN"
    },
    "custconfAuthGeo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "code": {
          "$ref": "#/definitions/AuthGeoCodeEnumWrapperValue"
        },
        "values": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. These are the region codes\nyou are targeting for this policy.  The values that can be supplied within\nthis field are those that are supported by the MaxMind® GeoIP database."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "Geographic restrictions allow you to restrict content to end users in\nspecific locations.  The IP address of incoming requests is checked against a\ncurrent list of IP allocations to countries and to states within the US. If\nan end user’s IP address is not found in the list, they are allowed access\nto the content by default. The feature has both an Include and an Exclude\nlist which are used to target the allowed audience."
    },
    "custconfAuthHttpBasic": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "bindingPoint": {
          "type": "string",
          "description": "This is a URL to a resource on the authentication server responsible for\nauthentication of users."
        },
        "connectCount": {
          "type": "number",
          "format": "int64",
          "description": "This is the maximum number of connections a server should make to the\nauthentication binding point."
        },
        "realm": {
          "type": "string",
          "description": "This is the authentication realm given back to the user on requests which\ndo not contain the authentication credentials. Browsers typically display\nthis value to the user when the login credentials are requested."
        },
        "ttl": {
          "type": "number",
          "format": "int64",
          "description": "This is the number of seconds the authentication session will be cached by\nthe browsers. After this time, browsers will be asked to present the user\ncredentials again for re-authentication."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "HTTP basic authentication policies allow you to control access to your\ncontent by requiring the end user to enter a valid username and password\nbefore gaining access to content."
    },
    "custconfAuthReferer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "referer": {
          "type": "string",
          "description": "String of values deliminated by a '|' character. This is a list of domains\nauthorized to access content from this path in the container.  You may use\nwildcards to specify multiple websites hosted on the same domain."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "HTTP Referrer restriction policies allow you to limit access to your\npublished CDN URLs based on the HTTP Referrer header submitted by the\nbrowser.  This restriction policy prevents your content from being easily\ndistributed on unauthorized websites (also known as hot linking or deep\nlinking). Once this policy is applied to your CDN container, websites that\nare not listed in this policy will be denied access to the content cached at\nthis location."
    },
    "custconfAuthSignUrlsInPlaylist": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "filenamePatterns": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "useCookie": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "cookieName": {
          "type": "string"
        },
        "extendTTL": {
          "type": "number",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "Automatically apply my URL Signing policy to URLs inside my HLS playlists."
    },
    "custconfAuthUrlAsymmetricSignTlu": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "expireParameterName": {
          "type": "string"
        },
        "keyIdParameterName": {
          "type": "string"
        },
        "algorithmIdParameterName": {
          "type": "string"
        },
        "digestParameterName": {
          "type": "string"
        },
        "publicKeyIdMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "algorithmIdMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/custconfAuthUrlAsymmetricSignTluAlgorithmIdMapEnumWrapperValue"
          }
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfAuthUrlAsymmetricSignTluAlgorithmIdMapEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "hmacsha1",
        "hmacsha256"
      ],
      "default": "UNKNOWN"
    },
    "custconfAuthUrlSign": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "tokenField": {
          "type": "string",
          "description": "This is the name of the query string parameter that will be used by the\npublisher to specify the signature for the URL."
        },
        "ignoreFieldsAfterToken": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Select this option if you want Highwinds to exclude query string parameters\nspecified after the passphrase in the validation process."
        },
        "passPhraseField": {
          "type": "string",
          "description": "This is the name of the query string parameter that contains the value of\nthe secret.  This query string parameter is only used during the generation\nand validation of a URL signature and should not be present in the\npublished URL."
        },
        "passPhrase": {
          "type": "string",
          "description": "The shared secret used during the signing process.  This value should only\nbe known by Highwinds and systems authorized to sign your content."
        },
        "expiresField": {
          "type": "string",
          "description": "This is the name of the query string parameter that contains the Epoch time\nafter which the URL is considered invalid."
        },
        "ipAddressField": {
          "type": "string",
          "description": "This is a query string parameter that contains an IPv4 address to which the\npublished URL will be restricted."
        },
        "uriLengthField": {
          "type": "string",
          "description": "This is a query string parameter used to limit the number of characters in\nthe path that should be considered when validating the URL signature.  This\nfeature allows you to reuse the same signature on all assets stored in the\nsame cache path.  Setting this value to 0 will strip off the filename in\nthe URL (leaving the trailing slash) when calculating the checksum."
        },
        "userAgentField": {
          "type": "string",
          "description": "This is a query string parameter used to restrict the published URL to a\nspecific user agent. Publishers can use this feature during the signing\nprocess to ensure that only a specific user agent can access the published\ncontent.  You do not need to specify the user agent on the published URL.\nHighwinds will use the HTTP User-Agent header value during signature\nvalidation."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "URL Signing policies allow you to restrict access to your content by\nconfiguring a \"shared secret\" with Highwinds. This “shared secret” is\nused to apply an MD5 hashing algorithm on the URL to validate the signature\nsupplied on the request.  Since the \"shared secret\" is only known by the\npublisher and Highwinds, URL signatures cannot be generated by unauthorized\nusers."
    },
    "custconfAuthUrlSignAKv1": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "salt": {
          "type": "string",
          "description": "The salt is used as a shared secret in the signing process. This value\nshould only be known by Highwinds and by systems authorized to sign your\ncontent."
        },
        "param": {
          "type": "string",
          "description": "The authentication parameter defines the query string parameter in the\nrequest URL that contains the authentication information."
        },
        "extract": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The Akamai URL Signing v1 policy allows you to create a signed URL that\nimplements the same signing method used by Akamai; therefore, published URLs\nfrom an Akamai CDN network can be transitioned to the Highwinds network\nwithout you having to change your signing methods."
    },
    "custconfAuthUrlSignAKv2": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "passPhrase": {
          "type": "string",
          "description": "This is the shared secret used to sign the URL.  This value must be set to\na hexadecimal value padded to a byte boundary.  This value should only be\nknown by Highwinds and by personnel authorized to sign your content."
        },
        "tokenField": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. The token parameter is the\nname of the query string parameter or cookies that contains the value of\nthe token used in the signing algorithm."
        },
        "fieldDelimiter": {
          "type": "string",
          "description": "This is the field delimiter used to separate the parts of your token."
        },
        "aclDelimiter": {
          "type": "string",
          "description": "This is the delimiter used to separate the IP addresses in the ACL list."
        },
        "enableACLWildcard": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This allows you to enable the use of wildcard matches in your ACL list."
        },
        "hashStrategy": {
          "$ref": "#/definitions/AuthUrlSignAKv2HashStrategyEnumWrapperValue"
        },
        "salt": {
          "type": "string",
          "description": "This is random data used as additional input to the hashing algorithm."
        },
        "matchURL": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The Akamai URL Signing v2 policy allows you to create a signed URL that\nimplements the same signing method used by Akamai; therefore, published URLs\nfrom an Akamai CDN network can be transitioned to the Highwinds network\nwithout you having to change your signing methods."
    },
    "custconfAuthUrlSignAliCloudA": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "passPhrase": {
          "type": "string"
        },
        "tokenField": {
          "type": "string"
        },
        "includeParamsBeforeToken": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "expirationExtension": {
          "type": "number",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfAuthUrlSignAliCloudB": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "passPhrase": {
          "type": "string"
        },
        "expirationExtension": {
          "type": "number",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfAuthUrlSignAliCloudC": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "passPhrase": {
          "type": "string"
        },
        "expirationExtension": {
          "type": "number",
          "format": "int64"
        },
        "tokenField": {
          "type": "string"
        },
        "expireField": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfAuthUrlSignHmacTlu": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "expireParameterName": {
          "type": "string"
        },
        "keyIdParameterName": {
          "type": "string"
        },
        "algorithmIdParameterName": {
          "type": "string"
        },
        "digestParameterName": {
          "type": "string"
        },
        "symmetricKeyIdMap": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "algorithmIdMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/custconfAuthUrlSignHmacTluAlgorithmIdMapEnumWrapperValue"
          }
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfAuthUrlSignHmacTluAlgorithmIdMapEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "hmacsha1",
        "hmacsha256"
      ],
      "default": "UNKNOWN"
    },
    "custconfAuthUrlSignL3": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "tokenField": {
          "type": "string",
          "description": "This is the name of the query string parameter that will be used by the\npublisher to specify the signature for the URL."
        },
        "sharedSecretTable": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. An ordered list of shared\nsecrets. The order is CRITICAL and it MUST be identical to the ordered\ntable used by the Client."
        },
        "startField": {
          "type": "string",
          "description": "The name of the query string parameter that contains the start time when\nthe request is considered valid."
        },
        "expireField": {
          "type": "string",
          "description": "This is the name of the query string parameter that contains the time after\nwhich the URL is considered invalid. If defined, requests must contain the\nparameter, and its value must be in the future."
        },
        "timeFormat": {
          "$ref": "#/definitions/AuthUrlSignL3TimeFormatEnumWrapperValue"
        },
        "excludedParameters": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. A list of patterns that\nare used to describe query string parameters that should be omitted from\nthe hashing algorithm if contained in the URL. A asterisk '*' by itself\nindicates to exclude all query string parameters from the hashing\nalgorithm. The tokenField is always excluded. On the other hand, the\nstartField and/or expireField are always included in the hashing algorithm\nif present in the request even if listed here. Users may explicitly specify\nparameters to keep (not exclude) by preceding the glob with an exclamation\n\"!\". This may be useful if a User wants to exclude all query string\nparameters except one ore more known parameters.  For example, a value of\n'*,!version' means exclude all parameters except \"version\"."
        },
        "includeProtocolAndHost": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Indicates whether or not to include both the Protocol and Host when\ncalculating the signature."
        },
        "includeHostOnly": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Indicates whether or not to include the Host without the request Protocol\nwhen calculating the signature."
        },
        "injectClientIPAddress": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Indicates whether or not to include the Client's IP address when\ncalculating the signature."
        },
        "clientIPAddressField": {
          "type": "string",
          "description": "Provides the capability to rename the query string parameter that is used\nto inject the Client's IP address into the hashing algorithm. This\nconfiguration is only applicable when injectClientIPAddress is set to true."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The Level 3 URL Signing policy allows you to create a signed URL that\nimplements the same signing method used by Level 3; therefore, published URLs\nfrom an Level 3 CDN network can be transitioned to the Highwinds network\nwithout you having to change your signing methods."
    },
    "custconfAuthUrlSignLMV": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "secret": {
          "type": "string",
          "description": "This is the shared secret used to sign the URL.  This value should only be\nknown by Highwinds and by personnel authorized to sign your content."
        },
        "parameterMatchPatterns": {
          "type": "string"
        },
        "startTimeFieldName": {
          "type": "string"
        },
        "endTimeFieldName": {
          "type": "string"
        },
        "lengthFieldName": {
          "type": "string"
        },
        "ipFieldName": {
          "type": "string"
        },
        "riFieldName": {
          "type": "string"
        },
        "rsFieldName": {
          "type": "string"
        },
        "tokenFieldName": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The Limelight Networks URL signing policy allows you to create a signed URL\nthat implements the same signing method used by Limelight Networks;\ntherefore, published URLs from a Limelight CDN network can be transitioned to\nthe Highwinds network without you having to change your URLs (or the signing\nprocess)."
    },
    "custconfAuthVhostLockout": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "lockout": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "By enabling this checkbox your content is only accessible through one of\nyour configured Hostnames."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The Hostname Access policy allows you to restrict delivery of your content to\nyour configured Hostnames.  Any request for your content that is not using\none of your configured hostnames will be denied."
    },
    "custconfAwsSignedOriginPullV4": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "bucketIdentifier": {
          "type": "string"
        },
        "accessKeyId": {
          "type": "string"
        },
        "secretAccessKey": {
          "type": "string"
        },
        "awsRegion": {
          "type": "string"
        },
        "awsService": {
          "type": "string"
        },
        "expireTimeSeconds": {
          "type": "number",
          "format": "int64"
        },
        "signedHeaders": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "authenticationType": {
          "$ref": "#/definitions/AwsSignedOriginPullV4AuthenticationTypeEnumWrapperValue"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "popFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfBandWidthLimit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "rule": {
          "type": "string",
          "description": "String of values deliminated by a '|' character. These are pattern match\nrules to use for applying rate limiting on requests."
        },
        "values": {
          "type": "string",
          "title": "These are the intial bytes (ri) and the sustained rate (rs) query string\nparameters to use for this rule.  Example: ri=100,rs=1000"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "title": "The pattern based bandwidth throttling policy allows you to limit the\ntransfer rate of assets to end users based on a set of rules matching the\nrequest's HTTP User-Agent and/or the path.  Each rule must be expressed in\nthe following format: \u003cUser-Agent Pattern\u003e:\u003cpath pattern 1, path pattern 2\u003e.\nFor example, the pattern:  \"Mozilla*:*.mp3,*dir*.exe|*IE*:*.jpg,*.zip|*ios\n6*:* \" will match all MP3 files and EXE files containing the substring\n“dir” that are requested by a User-Agent containing the substring\n\"Mozilla,” all JPG and ZIP files requested by a User-Agent containing the\nsubstring \"IE,” and all requests made by User-Agents containing the\nsubstring \"ios 6.”"
    },
    "custconfBandWidthRateLimitUnits": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "initial": {
          "$ref": "#/definitions/BandWidthRateLimitUnitsInitialEnumWrapperValue"
        },
        "sustained": {
          "$ref": "#/definitions/BandWidthRateLimitUnitsSustainedEnumWrapperValue"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The Bandwidth Throttling Units policy allows you to override the default\nunits used by the CDN when processing the bandwidth throttling policies."
    },
    "custconfBandwidthRateLimit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "initialBurstName": {
          "type": "string"
        },
        "defaultInitialBurst": {
          "type": "number",
          "format": "int64"
        },
        "sustainedRateName": {
          "type": "string"
        },
        "defaultSustainedRate": {
          "type": "number",
          "format": "int64"
        },
        "initialBurstUnits": {
          "$ref": "#/definitions/BandwidthRateLimitInitialBurstUnitsEnumWrapperValue"
        },
        "sustainedRateUnits": {
          "$ref": "#/definitions/BandwidthRateLimitSustainedRateUnitsEnumWrapperValue"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfBillableRegions": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabledRegions": {
          "$ref": "#/definitions/BillableRegionsEnabledRegionsEnumWrapperValue"
        }
      },
      "description": "List of delivery regions enabled for the platform."
    },
    "custconfBlockingOriginPullMode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "Block all responses until the full file has been downloaded in the\nbackground."
    },
    "custconfCacheControl": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "statusCodeMatch": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "maxAge": {
          "type": "integer",
          "format": "int32",
          "description": "The client TTL controls the lifetime of the asset in the browser's cache.\nThe value entered here will be sent to the browser in the Cache-Control\nmax-age directive for HTTP 1.1 clients and the Expires header for HTTP 1.0\nclients."
        },
        "mustRevalidate": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Selecting this option instructs the CDN caching servers to insert the\nmust-revalidate directive on all HTTP responses sent to clients."
        },
        "synchronizeMaxAge": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Selecting this option allows the CDN to synchronize the Max-Age header it\nsends to clients with the remaining TTL of the asset in the cache.  This\nallows assets to expire from the browser cache at the same time they expire\nfrom the CDN."
        },
        "override": {
          "type": "string",
          "description": "This allows you to specify a custom Cache-Control header to be used by the\nCDN on all HTTP responses targeted by this policy.  Note: Do not include\nthe header name (Cache-Control) in this field. Only the value of the header\nshould be specified."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The browser caching policy allows you to control the browser caching behavior\nof your assets independently from the CDN cache.  For example, this policy\nallows you to set lower or higher TTLs for the browser than those of the CDN\ncache."
    },
    "custconfCacheKeyModification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "normalizeKeyPathToLowerCase": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "When set, purges and requests for a file will be case insensitive. This\nsetting is useful if you have a case insensitive origin server and would\nlike to avoid duplicating assets."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The Cache Key Modification policy allows for manipulation of the way the\ncache uniquely stores assets."
    },
    "custconfClientAccess": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "policy": {
          "type": "string",
          "format": "base64",
          "title": "The contents of the cross domain file you want to serve instead of the\ndefault"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "This allows you to override the default client access policy file\n(clientaccesspolicy.xml) delivered by the CDN caching servers."
    },
    "custconfClientKeepAlive": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "timeout": {
          "type": "integer",
          "format": "int32",
          "description": "Timeout in seconds for idle client connections of GFS."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "popFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "regionFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The clientKeepAlive policy allows you to specify how long you want the CDN\ncaching server to keep an client connection open after serving a request."
    },
    "custconfClientRequestModification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "urlPattern": {
          "type": "string"
        },
        "urlRewrite": {
          "type": "string"
        },
        "headerPattern": {
          "type": "string"
        },
        "headerRewrite": {
          "type": "string"
        },
        "addHeaders": {
          "type": "string",
          "description": "String of values deliminated by a '|' character. This is the static HTTP\nheader you want inserted into the CDN request. Start value with \"append:\"\nor \"replace:\" which defines if Header will be replace or added. Default is\nappend."
        },
        "flowControl": {
          "$ref": "#/definitions/custconfClientRequestModificationFlowControlEnumWrapperValue"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "clientRequestFilter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custconfRequestFilter"
          }
        }
      }
    },
    "custconfClientRequestModificationFlowControlEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "next",
        "break"
      ],
      "default": "UNKNOWN"
    },
    "custconfClientRequestQueue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "scriptPath": {
          "type": "string",
          "description": "This is the path of the script on the CDN caching server."
        },
        "quitOnError": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "logLevel": {
          "$ref": "#/definitions/custconfClientRequestQueueLogLevelEnumWrapperValue"
        },
        "ipList": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. This is a comma separated\nlist of IP address and/or CIDR blocks that limit the execution of the\nscript."
        },
        "ipListStageDir": {
          "type": "string",
          "description": "This is a subdirectory path that must exist in the request path in order to\napply the script. For example,  if the value is \"foo/bar\" (with or without\nslashes on the ends), and /foo/bar/ exists in the request path, then a\ndynamic IP-based content protection policy will be applied. Otherwise, the\nrequest will be allowed to pass through untouched."
        },
        "ipListAccessCode": {
          "$ref": "#/definitions/ClientRequestQueueIpListAccessCodeEnumWrapperValue"
        },
        "provideIPGeoInfo": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "sendRequestBody": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Boolean flag for indicating whether the CDN Caching Server needs to send\nthe body provided in a Client request to the Script Engine."
        },
        "requestBodyMaximumSize": {
          "type": "number",
          "format": "int64",
          "description": "Integer that defines the maximum size in bytes of a Client request's body\nthat can be sent by the CDN Caching Server to the Script Engine when\nSendRequestBody has been set to true (enabled)."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The script engine client request queue provides access to requests received\nby the CDN, giving you the ability to alter the request before the host\nprocesses it.  Access to the client’s request also provides you the ability\nto dynamically change your host's configuration policies based on business\nrules that require visibility to the client request."
    },
    "custconfClientRequestQueueLogLevelEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "debug",
        "info",
        "warning",
        "error",
        "crit"
      ],
      "default": "UNKNOWN"
    },
    "custconfClientResponseModification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "statusCodeRewrite": {
          "type": "number",
          "format": "int64"
        },
        "headerPattern": {
          "type": "string"
        },
        "headerRewrite": {
          "type": "string"
        },
        "addHeaders": {
          "type": "string",
          "description": "String of values deliminated by a '|' character. This is the static HTTP\nheader you want inserted into the CDN response. Start value with \"append:\"\nor \"replace:\" which defines if Header will be replace or added. Default is\nappend."
        },
        "flowControl": {
          "$ref": "#/definitions/custconfClientResponseModificationFlowControlEnumWrapperValue"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "clientRequestFilter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custconfRequestFilter"
          }
        },
        "clientResponseFilter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custconfResponseFilter"
          }
        }
      }
    },
    "custconfClientResponseModificationFlowControlEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "next",
        "break"
      ],
      "default": "UNKNOWN"
    },
    "custconfClientResponseQueue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "scriptPath": {
          "type": "string",
          "description": "This is the path of the script on the CDN caching server."
        },
        "quitOnError": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This value instructs the CDN to terminate the processing of the request on\nall script failures."
        },
        "logLevel": {
          "$ref": "#/definitions/custconfClientResponseQueueLogLevelEnumWrapperValue"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The script engine client response queue policy allows you to register a PHP\nscript to execute on the CDN caching server prior to the server returning a\nresponse to a client.  Scripts defined in this queue can modify, add and/or\ndelete HTTP headers in the CDN repsonse."
    },
    "custconfClientResponseQueueLogLevelEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "debug",
        "info",
        "warning",
        "error",
        "crit"
      ],
      "default": "UNKNOWN"
    },
    "custconfCloseHalfOpenConnections": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Force the close of client connections upon receiving TCP FIN from clients."
        }
      },
      "description": "Instructs the CDN caching server to fully close the connection immediately\nafter receiving a TCP FIN from the client."
    },
    "custconfCompression": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "gzip": {
          "type": "string",
          "title": "String of values deliminated by a ',' character. The list of file\nextensions you want the caching servers to use to identify the content you\nwant compressed before delivering it to end users"
        },
        "mime": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. A list of rules based on\nMIME types you want the caching servers to use to identify content you want\ncompressed before delivering it to end users."
        },
        "level": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The compression policy allows you to provide a list of file extensions you\nwant the CDN caching servers to automatically compress before delivering\ncontent to end users.  This policy is typically used when your origin server\ndoes not support compression or you are unable to configure your origin to\ncompress your files.  If your origin is configured to already compress files,\nyou should consider adding the Compressed Origin Pull policy to your host,\nwhich will enable the CDN caching server to request compressed (gzip) version\nof your assets.  The compressed origin pull policy can be found in the Origin\nPull policies list.  Please note that our caching servers schedule the\ncompression of files, and typically you do not see the compressed delivery\nuntil the file has been requested several times.  Typically, this list is\ncomprised of text files like javascript, html and CSS files.  You should not\ninclude file extensions that match media files (images, videos, or audio\nfiles) or any other file format that includes a built in compression\nalgorithm.  Attempting to further compress these types of files usually\nresults in a larger file being delivered to end users."
    },
    "custconfConfiguration": {
      "type": "object",
      "properties": {
        "accessLogger": {
          "$ref": "#/definitions/custconfAccessLogger"
        },
        "accessLogs": {
          "$ref": "#/definitions/custconfAccessLogs"
        },
        "accessLogIpObfuscation": {
          "$ref": "#/definitions/custconfAccessLogIpObfuscation"
        },
        "accessLogsConfig": {
          "$ref": "#/definitions/custconfAccessLogsConfig"
        },
        "account": {
          "$ref": "#/definitions/custconfAccount"
        },
        "authACL": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfAuthACL"
          },
          "description": "IP address restrictions allow you to configure your CDN container to grant\nor deny a specific IP addresses or range of IP addresses from accessing\ncontent cached in a directory in your CDN container."
        },
        "authGeo": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfAuthGeo"
          },
          "description": "Geographic restrictions allow you to restrict content to end users in\nspecific locations.  The IP address of incoming requests is checked against\na current list of IP allocations to countries and to states within the US.\nIf an end user’s IP address is not found in the list, they are allowed\naccess to the content by default. The feature has both an Include and an\nExclude list which are used to target the allowed audience."
        },
        "authHttpBasic": {
          "$ref": "#/definitions/custconfAuthHttpBasic"
        },
        "authReferer": {
          "$ref": "#/definitions/custconfAuthReferer"
        },
        "authSignUrlsInPlaylist": {
          "$ref": "#/definitions/custconfAuthSignUrlsInPlaylist"
        },
        "authUrlSign": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfAuthUrlSign"
          },
          "description": "URL Signing policies allow you to restrict access to your content by\nconfiguring a \"shared secret\" with Highwinds. This “shared secret” is\nused to apply an MD5 hashing algorithm on the URL to validate the signature\nsupplied on the request.  Since the \"shared secret\" is only known by the\npublisher and Highwinds, URL signatures cannot be generated by unauthorized\nusers."
        },
        "authUrlSignAliCloudA": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfAuthUrlSignAliCloudA"
          }
        },
        "authUrlSignAliCloudB": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfAuthUrlSignAliCloudB"
          }
        },
        "authUrlSignAliCloudC": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfAuthUrlSignAliCloudC"
          }
        },
        "authUrlSignHmacTlu": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfAuthUrlSignHmacTlu"
          }
        },
        "authUrlAsymmetricSignTlu": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfAuthUrlAsymmetricSignTlu"
          }
        },
        "authUrlSignL3": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfAuthUrlSignL3"
          },
          "description": "The Level 3 URL Signing policy allows you to create a signed URL that\nimplements the same signing method used by Level 3; therefore, published\nURLs from an Level 3 CDN network can be transitioned to the Highwinds\nnetwork without you having to change your signing methods."
        },
        "authUrlSignAKv1": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfAuthUrlSignAKv1"
          },
          "description": "The Akamai URL Signing v1 policy allows you to create a signed URL that\nimplements the same signing method used by Akamai; therefore, published\nURLs from an Akamai CDN network can be transitioned to the Highwinds\nnetwork without you having to change your signing methods."
        },
        "authUrlSignAKv2": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfAuthUrlSignAKv2"
          },
          "description": "The Akamai URL Signing v2 policy allows you to create a signed URL that\nimplements the same signing method used by Akamai; therefore, published\nURLs from an Akamai CDN network can be transitioned to the Highwinds\nnetwork without you having to change your signing methods."
        },
        "authUrlSignLMV": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfAuthUrlSignLMV"
          },
          "description": "The Limelight Networks URL signing policy allows you to create a signed URL\nthat implements the same signing method used by Limelight Networks;\ntherefore, published URLs from a Limelight CDN network can be transitioned\nto the Highwinds network without you having to change your URLs (or the\nsigning process)."
        },
        "authVhostLockout": {
          "$ref": "#/definitions/custconfAuthVhostLockout"
        },
        "bandWidthLimit": {
          "$ref": "#/definitions/custconfBandWidthLimit"
        },
        "bandwidthRateLimit": {
          "$ref": "#/definitions/custconfBandwidthRateLimit"
        },
        "bandWidthRateLimitUnits": {
          "$ref": "#/definitions/custconfBandWidthRateLimitUnits"
        },
        "billableRegions": {
          "$ref": "#/definitions/custconfBillableRegions"
        },
        "blockingOriginPullMode": {
          "$ref": "#/definitions/custconfBlockingOriginPullMode"
        },
        "cacheControl": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfCacheControl"
          },
          "description": "The browser caching policy allows you to control the browser caching\nbehavior of your assets independently from the CDN cache.  For example,\nthis policy allows you to set lower or higher TTLs for the browser than\nthose of the CDN cache."
        },
        "cacheKeyModification": {
          "$ref": "#/definitions/custconfCacheKeyModification"
        },
        "clientAccess": {
          "$ref": "#/definitions/custconfClientAccess"
        },
        "clientRequestQueue": {
          "$ref": "#/definitions/custconfClientRequestQueue"
        },
        "clientResponseQueue": {
          "$ref": "#/definitions/custconfClientResponseQueue"
        },
        "clientRequestModification": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfClientRequestModification"
          }
        },
        "clientResponseModification": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfClientResponseModification"
          }
        },
        "clientKeepAlive": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfClientKeepAlive"
          },
          "description": "The clientKeepAlive policy allows you to specify how long you want the CDN\ncaching server to keep an client connection open after serving a request."
        },
        "compression": {
          "$ref": "#/definitions/custconfCompression"
        },
        "consistentHashing": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfConsistentHashing"
          },
          "description": "The consistent hashing policy allows you to customize the consistent\nhashing algorithm used by Doppler."
        },
        "contentDispositionByURL": {
          "$ref": "#/definitions/custconfContentDispositionByURL"
        },
        "contentDispositionByHeader": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfContentDispositionByHeader"
          },
          "description": "The content disposition by HTTP header match policy allows you to control\nthe Content-Disposition delivered by the CDN using a pattern match against\nthe value of any HTTP header present in the request.  If you are using URL\nquery string parameters to control the Content-Disposition header (using\nthe Content Disposition by URL policy) then the Content-Disposition header\ngenerated by this policy will not be used on that specific request.  A\ntypical use case for this policy is to set a different Content-Disposition\nheader based on the User-Agent in the request."
        },
        "cookieBehavior": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfCookieBehavior"
          }
        },
        "crossDomain": {
          "$ref": "#/definitions/custconfCrossDomain"
        },
        "memoryCacheable": {
          "$ref": "#/definitions/custconfMemoryCacheable"
        },
        "h2proxyCaching": {
          "$ref": "#/definitions/custconfH2proxyCaching"
        },
        "custConfig": {
          "$ref": "#/definitions/custconfCustConfig"
        },
        "customer": {
          "$ref": "#/definitions/custconfCustomer"
        },
        "customHeader": {
          "$ref": "#/definitions/custconfCustomHeader"
        },
        "customMimeType": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfCustomMimeType"
          },
          "description": "The custom mime type policy allows you to map file extensions to specific\nmime types for the CDN caching servers to use when delivering assets.  The\nmime types you map using this policy may also be limited to specific\nresponse codes to address scenarios in which the mime type changes based on\nthe response code."
        },
        "deliveryPlatforms": {
          "$ref": "#/definitions/custconfDeliveryPlatforms"
        },
        "requestFilter": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfRequestFilter"
          }
        },
        "responseFilter": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfResponseFilter"
          }
        },
        "deviceBasedDynamicContent": {
          "$ref": "#/definitions/custconfDeviceBasedDynamicContent"
        },
        "dnsIpv6": {
          "$ref": "#/definitions/custconfDnsIpv6"
        },
        "dnsOverride": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfDnsOverride"
          }
        },
        "drainTCPSendBuffer": {
          "$ref": "#/definitions/custconfDrainTCPSendBuffer"
        },
        "dynamicOrigin": {
          "$ref": "#/definitions/custconfDynamicOrigin"
        },
        "dynamicCacheRule": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfDynamicCacheRule"
          },
          "description": "Client response based on Rules."
        },
        "dynamicContent": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfDynamicContent"
          },
          "description": "The dynamic content caching policy allows you to specify a set of query\nstring and/or HTTP header key/value pairs that should create a unique cache\nentry for a given URL.  This policy is useful when your origin returns\nunique content for the same URL based on a set of query string parameters\nprovided in the request."
        },
        "failSafeOriginPull": {
          "$ref": "#/definitions/custconfFailSafeOriginPull"
        },
        "fileSegmentation": {
          "$ref": "#/definitions/custconfFileSegmentation"
        },
        "varyHeaderField": {
          "$ref": "#/definitions/custconfVaryHeaderField"
        },
        "flv": {
          "$ref": "#/definitions/custconfFlv"
        },
        "flvPseudoStreaming": {
          "$ref": "#/definitions/custconfFlvPseudoStreaming"
        },
        "general": {
          "$ref": "#/definitions/custconfGeneral"
        },
        "gzipOriginPull": {
          "$ref": "#/definitions/custconfGzipOriginPull"
        },
        "hashType": {
          "$ref": "#/definitions/custconfHashType"
        },
        "httpMethods": {
          "$ref": "#/definitions/custconfHttpMethods"
        },
        "internalError": {
          "$ref": "#/definitions/custconfInternalError"
        },
        "languageRedirect": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfLanguageRedirect"
          },
          "description": "The language code origin request rewrite policy allows you to rewrite\nresponses from your origin to 301 response codes such that you can re-issue\nthe request to your origin with a new request URL.  This policy was created\nto specifically map language codes in a origin request URL to default\nlanguages when a resource was not found on the origin.  NOTE: This policy\nrequires a custom script to be configured on the script engine."
        },
        "legacyXdomain": {
          "$ref": "#/definitions/custconfLegacyXdomain"
        },
        "liveStreaming": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfLiveStreaming"
          }
        },
        "midTierCaching": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfMidTierCaching"
          },
          "title": "Mid Tier Caching Configuration"
        },
        "nrtReporting": {
          "$ref": "#/definitions/custconfNrtReporting"
        },
        "origin": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/cdncustconfOrigin"
          }
        },
        "originPersistentConnections": {
          "$ref": "#/definitions/custconfOriginPersistentConnections"
        },
        "originPull": {
          "$ref": "#/definitions/custconfOriginPull"
        },
        "originPullCacheExtension": {
          "$ref": "#/definitions/custconfOriginPullCacheExtension"
        },
        "originPullHost": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfOriginPullHost"
          }
        },
        "originPullProtocol": {
          "$ref": "#/definitions/custconfOriginPullProtocol"
        },
        "originPullLogs": {
          "$ref": "#/definitions/custconfOriginPullLogs"
        },
        "originPullLogsConfig": {
          "$ref": "#/definitions/custconfOriginPullLogsConfig"
        },
        "originPullPolicy": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfOriginPullPolicy"
          },
          "description": "The CDN caching policy allows you to control how your origin's content is\ncached on the CDN."
        },
        "originPullPops": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfOriginPullPops"
          }
        },
        "originPullShield": {
          "$ref": "#/definitions/custconfOriginPullShield"
        },
        "originPullShieldOverride": {
          "$ref": "#/definitions/custconfOriginPullShieldOverride"
        },
        "originRequestModification": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfOriginRequestModification"
          }
        },
        "originResponseModification": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfOriginResponseModification"
          }
        },
        "originRequestQueue": {
          "$ref": "#/definitions/custconfOriginRequestQueue"
        },
        "originResponseQueue": {
          "$ref": "#/definitions/custconfOriginResponseQueue"
        },
        "pathModification": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfPathModification"
          },
          "description": "Request URL rewriting policies can be used to modify the URL path of a CDN\nrequest.  This policy requires a custom script to be configured.\nThis policy requires the Script Engine service enabled on your account. If\nyou do not have this service enabled, please contact your sales\nrepresentative for more information."
        },
        "preserveRedirectHost": {
          "$ref": "#/definitions/custconfPreserveRedirectHost"
        },
        "queryStrParam": {
          "$ref": "#/definitions/custconfQueryStrParam"
        },
        "receiptLogs": {
          "$ref": "#/definitions/custconfReceiptLogs"
        },
        "receiptLogsConfig": {
          "$ref": "#/definitions/custconfReceiptLogsConfig"
        },
        "redirectExceptions": {
          "$ref": "#/definitions/custconfRedirectExceptions"
        },
        "redirectMappings": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfRedirectMappings"
          },
          "description": "The response code redirection policy allows you to map cache response codes\nto an HTTP redirect response.  When this policy is applied to a host, the\ncaching servers will redirect clients to the URL specified in this policy\ninstead of delivering the response code you mapped in the policy."
        },
        "requestReceipt": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfRequestReceipt"
          }
        },
        "requestReceiptReportPercentage": {
          "$ref": "#/definitions/custconfRequestReceiptReportPercentage"
        },
        "requestReceiptServer": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfRequestReceiptServer"
          }
        },
        "responseHeader": {
          "$ref": "#/definitions/custconfResponseHeader"
        },
        "robotsTxt": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfRobotsTxt"
          }
        },
        "awsSignedOriginPullV4": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfAwsSignedOriginPullV4"
          }
        },
        "scriptNegCaching": {
          "$ref": "#/definitions/custconfScriptNegCaching"
        },
        "serverlessScripting": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfServerlessScripting"
          },
          "description": "Serverless Script Processing is currently under development and will only\nbe used in limited testing."
        },
        "staticHeader": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfStaticHeader"
          },
          "description": "The static header injection policy allows you to insert headers into the\nCDN request and response processor."
        },
        "streamChunkedEncodingResponse": {
          "$ref": "#/definitions/custconfStreamChunkedEncodingResponse"
        },
        "timePseudoStreaming": {
          "$ref": "#/definitions/custconfTimePseudoStreaming"
        },
        "tossbackBypass": {
          "$ref": "#/definitions/custconfTossbackBypass"
        },
        "closeHalfOpenConnections": {
          "$ref": "#/definitions/custconfCloseHalfOpenConnections"
        },
        "tossbackAlways": {
          "$ref": "#/definitions/custconfTossbackAlways"
        },
        "http2Support": {
          "$ref": "#/definitions/custconfHttp2Support"
        },
        "vHost": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfVHost"
          },
          "description": "A hostname policy allows you to specify an alternate domain name that you\nwant to use to access content from your CDN container."
        },
        "waf": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfWaf"
          }
        },
        "wafClustersOverride": {
          "type": "array",
          "x-omitempty": true,
          "items": {
            "$ref": "#/definitions/custconfWafClustersOverride"
          }
        },
        "xForwardedForBehavior": {
          "$ref": "#/definitions/custconfXForwardedForBehavior"
        },
        "testPolicyOne": {
          "$ref": "#/definitions/custconfTestPolicyOne"
        },
        "testPolicyTwo": {
          "$ref": "#/definitions/custconfTestPolicyTwo"
        }
      }
    },
    "custconfConsistentHashing": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "defaultLoadBalanceHosts": {
          "type": "string",
          "description": "The number of additional hosts you would like Doppler to use when selecting\na host for content.  The additional hosts will be evenly load balanced by\nDoppler and will cause content to be duplicated for the customer on each\nserver.  The value (0 to 65535) entered in this field will be limited to\nthe number of hosts available in the data center. The value 'all' can be\nused to spread a file across all hosts in the data center."
        },
        "enableSidewayPulling": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "popFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "regionFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The consistent hashing policy allows you to customize the consistent hashing\nalgorithm used by Doppler."
    },
    "custconfContentDispositionByHeader": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "headerFieldName": {
          "type": "string",
          "description": "The setting allows you to specify the name of the HTTP header you'd like to\nuse in the pattern match for this policy."
        },
        "headerValueMatch": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. A list of glob patterns\nthat apply this policy if any of them match against the value of the header\nspecified."
        },
        "defaultType": {
          "$ref": "#/definitions/ContentDispositionByHeaderDefaultTypeEnumWrapperValue"
        },
        "overrideOriginHeader": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This setting allows you to force the Content-Disposition generated by the\nCDN for this policy to override the Content-Disposition header cached from\nyour origin."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The content disposition by HTTP header match policy allows you to control the\nContent-Disposition delivered by the CDN using a pattern match against the\nvalue of any HTTP header present in the request.  If you are using URL query\nstring parameters to control the Content-Disposition header (using the\nContent Disposition by URL policy) then the Content-Disposition header\ngenerated by this policy will not be used on that specific request.  A\ntypical use case for this policy is to set a different Content-Disposition\nheader based on the User-Agent in the request."
    },
    "custconfContentDispositionByURL": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "dispositionNameQSParam": {
          "type": "string",
          "description": "This is the name of the query string parameter which contains the file name\nto use in the Content-Disposition header.  This setting is typically used\nby customers to configure a \"friendly name\" for URLs that have obfuscated\nfile names."
        },
        "dispositionTypeQSParam": {
          "type": "string",
          "description": "This is the name of the query string parameter which contains the\ndisposition type to use in the Content-Disposition header. Typically, this\nvalue is set to attachment if you want the browser to present the user with\na \"File Download\" dialog box and set to inline if you want the browser to\nrender the content inline (play an audio/video file instead of downloading\nit)."
        },
        "dispositionOverrideQSParam": {
          "type": "string",
          "description": "This setting allows you to define a query string parameter that when\npresent in the URL contains a string that should be used for the\nContent-Disposition header.  The string specified in the URL will\ncompletely replace the value the CDN would have used based on other\npolicies defined for the Content-Disposition header."
        },
        "overrideOriginHeader": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This setting allows you to force the Content-Disposition generated by the\nCDN for this policy to override the Content-Disposition header cached from\nyour origin."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The content disposition by URL policy allows you to control\nContent-Disposition HTTP header delivered by the CDN caching servers.  The\npolicy gives you control over each of the header directives and allows you to\nspecify a URL pattern match for determining when to apply the policy. Please\nnote this policy takes precedence over all the other content disposition\npolicies."
    },
    "custconfCookieBehavior": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "allowCachingSetCookie": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfCrossDomain": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "file": {
          "type": "string",
          "format": "base64",
          "title": "The contents of the cross domain file you want delivered instead of the\ndefault"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "This allows you to override the default cross domain policy file\n(crossdomain.xml) delivered by the CDN caching servers."
    },
    "custconfCustConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "microSeconds": {
          "type": "string"
        }
      }
    },
    "custconfCustomHeader": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "xForwardedForAuth": {
          "type": "string",
          "description": "This is the name of the X-Forwarded-For header you want the CDN to use when\nmaking requests to your basic authorization server."
        },
        "xForwardedForOrigin": {
          "type": "string",
          "description": "This is the name of the X-Forwarded-For header you want the CDN to use when\nmaking requests to your origin server."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The X-Forwarded-For header policy allows you to override the name of the\nX-Forwarded-For header the CDN sends to your origin."
    },
    "custconfCustomMimeType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "code": {
          "type": "string",
          "title": "String of values deliminated by a ',' character. A comma separated list of\nstatus codes that apply to this policy"
        },
        "extensionMap": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. This is a comma separated\nlist of file extension and mime type pairs that describe the mime type\nmapping for the CDN caching servers.  The file extension and mime type\nvalues should be delimited by a colon (:). For example, to map files ending\nwith jpg to the image/jpeg mime type and files ending with png to\nimage/png, set this value to: jpg:image/jpeg,png:image/png."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The custom mime type policy allows you to map file extensions to specific\nmime types for the CDN caching servers to use when delivering assets.  The\nmime types you map using this policy may also be limited to specific response\ncodes to address scenarios in which the mime type changes based on the\nresponse code."
    },
    "custconfCustomer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "accessLogs": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "accessLogExpireTimeHCS": {
          "type": "number",
          "format": "int64"
        },
        "accessLogExpireTimeLocal": {
          "type": "number",
          "format": "int64"
        },
        "accessLogFields": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "compressAccessLogs": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "opLogs": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "opLogFields": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "suspended": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "uploadAccessLogsToHCS": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "receiptLogs": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "receiptLogFields": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfDeliveryPlatforms": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "platforms": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfDeviceBasedDynamicContent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "mobileDevicePattern": {
          "type": "string",
          "description": "The regular expression used to determine if a User-Agent is a mobile\ndevice.  The CDN considers a positive match using this pattern as being a\nmobile device."
        },
        "nameOverride": {
          "type": "string",
          "description": "Provides the ability to change the name of the parameter/header of\ninterest."
        },
        "passToOrigin": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "A flag that tells the CDN to pass through the DEVICE parameter to the\norigin."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "Extends dynamic content by rewriting the \"DEVICE\" parameter and header based\non the User-Agent in the Client Request."
    },
    "custconfDnsIpv6": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enable": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      }
    },
    "custconfDnsOverride": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "answer": {
          "type": "string"
        },
        "pop": {
          "type": "string"
        },
        "ttl": {
          "type": "number",
          "format": "int64"
        },
        "type": {
          "$ref": "#/definitions/DnsOverrideTypeEnumWrapperValue"
        },
        "weight": {
          "type": "number",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      }
    },
    "custconfDrainTCPSendBuffer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Force edges to wait for acknowledge of data in the TCP send buffer after\nwriting the requested content into the socket."
        }
      },
      "description": "Instructs the CDN caching server to block until the socket send buffer is\ndrained below a threshold after serving a request."
    },
    "custconfDynamicCacheRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "statusCode": {
          "type": "number",
          "format": "int64",
          "title": "Status code to return"
        },
        "headers": {
          "type": "string",
          "title": "String of values deliminated by a '|' character. Pipe delimited ('|') list\nof headers to add to response"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "Client response based on Rules."
    },
    "custconfDynamicContent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "queryParams": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. A comma separated list of\nquery string parameters you want to include in the cache key generation.\nNOTE: This list is ignored when the Key Location is set to header."
        },
        "headerFields": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. A comma-separated list of\nglob patterns that represent HTTP request headers you want included in the\ncache key generation. Via the use of a colon ':', users can define each\nglob pattern to match a header name only, or the pattern can be used to\nmatch both the header name and value. A pattern without a colon ':' is\ntreated as a header name ONLY match. If the pattern matches the header,\nthen all values are used as a part of the cache key. If the pattern\ncontains a colon, the CDN uses the pattern on the left of the colon to\nmatch the header.  The pattern to the right of the colon is used to match\nthe value.  The CDN only uses the header/value as a part of the cache key\nif both patterns result in a match.  Note, no pattern after a colon\nindicates an empty header (no value).\nSee the fnmatch manpage for acceptable glob patterns."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The dynamic content caching policy allows you to specify a set of query\nstring and/or HTTP header key/value pairs that should create a unique cache\nentry for a given URL.  This policy is useful when your origin returns unique\ncontent for the same URL based on a set of query string parameters provided\nin the request."
    },
    "custconfDynamicOrigin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "queryParam": {
          "type": "string"
        },
        "allowedDomains": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      }
    },
    "custconfFailSafeOriginPull": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "statusCodeMatch": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfFileSegmentation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Flag for enabling the File Segmentation Feature."
        },
        "initialOriginRequestBehavior": {
          "$ref": "#/definitions/FileSegmentationInitialOriginRequestBehaviorEnumWrapperValue"
        },
        "initialRangeRetryFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "customSegmentSizeBytes": {
          "type": "number",
          "format": "int64"
        }
      },
      "description": "Policy for configuring the feature for downloading and storing files in\nsegments rather than a whole entity."
    },
    "custconfFlv": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "initByteSize": {
          "type": "string",
          "description": "This setting is typically set to 13 bytes."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The flash initial bytes policy allows you to force the CDN to send the\ninitial bytes of a FLV file which contains the header information that is\nused when jumping to different offsets in the file."
    },
    "custconfFlvPseudoStreaming": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "jumpToByteInitialBytesParam": {
          "type": "string"
        },
        "jumpToByteStartOffsetParam": {
          "type": "string"
        },
        "initialByteSize": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      }
    },
    "custconfGeneral": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "allowZeroByteFile": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "The allow zero byte files policy enables the caching of zero byte files\n(empty files) on the caching servers."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The zero byte file support policy enables the CDN to cache zero length files.\nBy default, the CDN proxies zero length files without caching them."
    },
    "custconfGzipOriginPull": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "title": "This enables support for compressed origin pull"
        }
      },
      "description": "The compressed origin pull policy allows you to enable the CDN caching\nservers to request compressed assets from your origin.  By enabling this\npolicy, the CDN caching servers send your origin the HTTP Accept-Encoding\nheader with the gzip code (Accept-Encoding: gzip)."
    },
    "custconfH2proxyCaching": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "This policy is used to override the memoryCacheable policy derived from other\npolicies."
    },
    "custconfHashType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "class": {
          "$ref": "#/definitions/HashTypeClassEnumWrapperValue"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "title": "The type of the hash"
    },
    "custconfHttp2Support": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "title": "Enable support of HTTP2"
        },
        "popFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "regionFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "title": "Enable support of HTTP2"
    },
    "custconfHttpMethods": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "passThru": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. This is a comma separated\nlist of HTTP methods you want the CDN to proxy to your origin. A wildcard\ncan be entered to include all methods (excluding HEAD and GET)."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The HTTP methods policy allows you to selectively enable additional HTTP\nmethods you want your CDN container to process.  A container automatically is\nset up to process HTTP GET and HEAD commands, so they should not be\nexplicitly defined in this policy.  HTTP methods included in this policy are\nproxied directly to your origin and not cached by the CDN."
    },
    "custconfInternalError": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "maxAge": {
          "type": "integer",
          "format": "int32",
          "description": "The default caching time for internally generated errors."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The CDN internal error caching policy allows you to control the TTL for\ninternally generated errors in the caching servers."
    },
    "custconfLanguageRedirect": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "httpCode": {
          "type": "integer",
          "format": "int32",
          "title": "The origin HTTP response code that applies to this policy"
        },
        "pathRegex": {
          "type": "string",
          "title": "A regular expression that identifies the paths or specific resource that\napplies to this policy"
        },
        "mapping": {
          "type": "string",
          "description": "String of values deliminated by a ';' character. This is a list of language\ncode mappings that maps one or more requested codes to a code to use in the\nredirect request. The mapping must be separated by an equals sign. If more\nthan one mapping is provided, the mappings will be applied in the order\nlisted until a match is made. Note that an asterisk is permitted to\nrepresent all requested codes."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The language code origin request rewrite policy allows you to rewrite\nresponses from your origin to 301 response codes such that you can re-issue\nthe request to your origin with a new request URL.  This policy was created\nto specifically map language codes in a origin request URL to default\nlanguages when a resource was not found on the origin.  NOTE: This policy\nrequires a custom script to be configured on the script engine."
    },
    "custconfLegacyXdomain": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "When enabled, the CDN supports the use of the Client Access and Cross\nDomain policies."
        }
      },
      "description": "The legacy cross domain policy allows you to override the default cross\ndomain file delivered by the CDN.  This policy is being deprecated, and you\nshould ensure that any custom cross domain file you wish the CDN to deliver\ncan be requested from your origin."
    },
    "custconfLiveStreaming": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enablePlaylistOptimization": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfMemoryCacheable": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "cacheable": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      }
    },
    "custconfMidTierCaching": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "serverAndPort": {
          "type": "string"
        },
        "protocol": {
          "$ref": "#/definitions/custconfMidTierCachingProtocolEnumWrapperValue"
        },
        "requestFormat": {
          "$ref": "#/definitions/MidTierCachingRequestFormatEnumWrapperValue"
        },
        "popFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "regionFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "title": "Mid Tier Caching Configuration"
    },
    "custconfMidTierCachingProtocolEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "http",
        "https",
        "match"
      ],
      "default": "UNKNOWN"
    },
    "custconfNrtReporting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "reportVHost": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      }
    },
    "custconfOriginPersistentConnections": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "title": "The origin persistent connection settings are used to enable persistent\nconnections to origins"
    },
    "custconfOriginPull": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "redirectAction": {
          "$ref": "#/definitions/OriginPullRedirectActionEnumWrapperValue"
        },
        "transparentMode": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This value instructs the CDN to use the original Host header from the\nclient request when revalidating \"no-cache\" assets against your origin."
        },
        "defaultBehavior": {
          "$ref": "#/definitions/OriginPullDefaultBehaviorEnumWrapperValue"
        },
        "noQSParams": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "GFS sends a path without any query string parameters when making external\norigin requests regardless if any parameters were sent by the User-Agent."
        },
        "retryMethods": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. List of HTTP Methods that\ndefine types of origin pull requests that can be retried if a failure\noccurs after sending a previous request."
        },
        "shieldResponseTimeoutOverride": {
          "type": "number",
          "format": "int64",
          "description": "The number of seconds for an Edge server to may wait for a Shield to\nrespond.  This value overrides the value CDN dynamically calculates per\nshield request. This policy does not affect how long to wait for connecting\nto an origin."
        },
        "passAllHeadersOnDedup": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The origin pull settings policy contains a list of settings that control the\nbehavior of origin pull requests."
    },
    "custconfOriginPullCacheExtension": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "expiredCacheExtension": {
          "type": "integer",
          "format": "int32",
          "description": "This is the number of seconds to extend an asset's TTL when the origin is\nunavailable. The CDN will continue to retry the origin up to the Origin\nUnavailable Max TTL."
        },
        "originUnreachableCacheExtension": {
          "type": "integer",
          "format": "int32",
          "description": "The origin unavailable max TTL value is used by the caching server when\nyour origin is unresponsive or the CDN cannot establish a connection to\nyour origin.  Under these conditions, the CDN can continue to serve expired\nassets from the cache. The value specified in this field establishes a\nmaximum allowable TTL for your expired assets.  If your origin connectivity\nor responsiveness is not corrected within your maximum allowable TTL, the\nCDN no longer serves your expired assets."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The cache extension policy allows you to define cache revalidation exceptions\non expired content.  This policy is applied by the CDN caching servers when\nthey are are unable to revalidate an expired asset with your origin due to\nnetwork connectivity issues or unresponsiveness from your origin."
    },
    "custconfOriginPullHost": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "originUrl": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "custconfOriginPullLogs": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "title": "Enable/Disable Origin Pull Logs"
    },
    "custconfOriginPullLogsConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "extraLogFields": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "title": "Origin Pull Log Settings"
    },
    "custconfOriginPullPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "statusCodeMatch": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. This is a pattern match\nexpression for each status code this policy applies to.  For example, 2*,\n3* applies this policy to all 200 and 300 level HTTP responses from your\norigin."
        },
        "expirePolicy": {
          "$ref": "#/definitions/OriginPullPolicyExpirePolicyEnumWrapperValue"
        },
        "expireSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "This is the expiration time used for assets pulled from your origin.  When\nusing Cache-Control headers expiration methods, this value is used if your\norigin doesn't return a max-age directive in the Cache-Control HTTP header.\nPlease note that a value of 0 in this fields instructs the caching server\nto retain assets for as long as possible."
        },
        "honorNoStore": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This enables the processing of no-store HTTP Cache-Control directives on\nyour container. By enabling this option, responses from your origin\ncontaining the no-store directive are not cached.  Be aware that requests\nfor non-cacheable assets are always forwarded to your origin and may impose\na high request and bandwidth load on your origin."
        },
        "honorNoCache": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This enables the processing of no-cache HTTP Cache-Control directives on\nyour container. By enabling this option, responses from your origin\ncontaining the no-cache directive force the CDN to submit every subsequent\nrequest to your origin for validation before serving the asset stored in\nthe cache."
        },
        "honorMustRevalidate": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "honorSurrogateControl": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "noCacheBehavior": {
          "$ref": "#/definitions/OriginPullPolicyNoCacheBehaviorEnumWrapperValue"
        },
        "maxAgeZeroToNoCache": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This enables the CDN to apply the no-cache behavior for assets delivered by\nyour origin containing a max-age directive equal to zero."
        },
        "mustRevalidateToNoCache": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This enables the CDN to apply the no-cache behavior for assets delivered by\nyour origin containing the must-revalidate directive."
        },
        "enableOPShieldForNoCache": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "bypassCacheIdentifier": {
          "type": "string",
          "description": "This allows you to define a custom directive that, when used by your origin\nin the Cache-Control response headers, forces the CDN to proxy the request\nto the end user without caching the result."
        },
        "forceBypassCache": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This forces the CDN to not cache any asset pulled from your origin that\nwould otherwise be stored at this location in the cache.  Typically this\npolicy is used to prevent 4XX and 5XX response codes from overwriting a\nfile in the cache when used with corresponding Origin Status Code Match\nsetting.  If bypass cache behavior is desired for all assets at a scope,\nOrigin Pull Queue Behavior in the Origin Pull Settings also needs to be set\nto NOCACHE for that scope."
        },
        "httpHeaders": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. This is the list of your\norigin’s HTTP headers that you want the CDN to cache and deliver to end\nusers."
        },
        "cachedHeadersOverride": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. Overrides the default\nsetting and Origin/CachedHeadersOverride (if configured) for what headers\nto cache from an origin."
        },
        "honorPrivate": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This enables the processing of private HTTP Cache-Control directives on\nyour container. By enabling this option, responses from your origin\ncontaining the private directive are not cached.  Be aware that requests\nfor non-cacheable assets are always forwarded to your origin and may impose\na high request and bandwidth load on your origin."
        },
        "honorSMaxAge": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This enables the processing of s-maxage HTTP Cache-Control directives on\nyour container. By enabling this option, the s-maxage HTTP Cache-Control\ndirective in the responses from your origin takes precedence over the\nmax-age directive.  If both max-age and s-maxage need to be preserved in\nthe client response, the Cache-Control header must be added to the \"Http\nHeader Caching\" setting."
        },
        "updateHttpHeadersOn304Response": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The CDN caching policy allows you to control how your origin's content is\ncached on the CDN."
    },
    "custconfOriginPullPops": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "popList": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. This is a list of CDN data\ncenters that are used to shield the customer's origin."
        },
        "popFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "regionFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfOriginPullProtocol": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "protocol": {
          "$ref": "#/definitions/custconfOriginPullProtocolProtocolEnumWrapperValue"
        },
        "enableSNI": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This key allows you to configure the CDN caching servers to use SNI while\nmaking Secured Connection to Origin."
        }
      },
      "description": "The Origin Pull Protocol allows you to configure the CDN caching servers to\nuse secured or non-secured connection to Origin."
    },
    "custconfOriginPullProtocolProtocolEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "http",
        "https",
        "match"
      ],
      "default": "UNKNOWN"
    },
    "custconfOriginPullShield": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This enables origin shielding."
        },
        "behavior": {
          "$ref": "#/definitions/OriginPullShieldBehaviorEnumWrapperValue"
        },
        "permissibleShieldInternalErrors": {
          "$ref": "#/definitions/OriginPullShieldPermissibleShieldInternalErrorsEnumWrapperValue"
        }
      },
      "description": "Origin shielding reduces the load on your origin by routing all origin pull\nrequests through a specific data center on the network instead of having\nmultiple data centers across the network request the same file from origin."
    },
    "custconfOriginPullShieldOverride": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Suspends origin shielding functionality."
        }
      },
      "description": "Suspending origin shield allows a Highwinds administrator to disable origin\nshielding for a customer without overriding the customer's configured origin\nshield value."
    },
    "custconfOriginRequestModification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "urlPattern": {
          "type": "string"
        },
        "urlRewrite": {
          "type": "string"
        },
        "headerPattern": {
          "type": "string"
        },
        "headerRewrite": {
          "type": "string"
        },
        "addHeaders": {
          "type": "string",
          "description": "String of values deliminated by a '|' character. This is the static HTTP\nheader you want inserted into the CDN request. Start value with \"append:\"\nor \"replace:\" which defines if Header will be replace or added. Default is\nappend."
        },
        "flowControl": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "clientRequestFilter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custconfRequestFilter"
          }
        }
      }
    },
    "custconfOriginRequestQueue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "scriptPath": {
          "type": "string",
          "description": "This is the path of the script on the CDN caching server."
        },
        "quitOnError": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This indicates the behavior of the caching server on script errors.  When\nselected, the caching server issues a 500 HTTP response code to an end user\nif a request failed to properly execute the script designated by this\npolicy.  If this option is unselected, the caching server ignores the\nscript errors and continues processing the request."
        },
        "logLevel": {
          "$ref": "#/definitions/custconfOriginRequestQueueLogLevelEnumWrapperValue"
        },
        "sendRequestBody": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Boolean flag for indicating whether the CDN Caching Server needs to send\nthe body of the Origin request to the Script Engine."
        },
        "requestBodyMaximumSize": {
          "type": "number",
          "format": "int64",
          "description": "Integer that defines the maximum size in bytes of a Origin request's body\nthat can be sent by the CDN Caching Server to the Script Engine when\nSendRequestBody has been set to true (enabled)."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The script engine origin pull request queue policy allows you to register a\nPHP script to execute on the CDN caching server prior to the server making an\norigin pull request to your origin.  Scripts defined in this queue can\nmodify, add, and/or delete HTTP headers on the origin pull request."
    },
    "custconfOriginRequestQueueLogLevelEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "debug",
        "info",
        "warning",
        "error",
        "crit"
      ],
      "default": "UNKNOWN"
    },
    "custconfOriginResponseModification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "statusCodeRewrite": {
          "type": "number",
          "format": "int64"
        },
        "headerPattern": {
          "type": "string"
        },
        "headerRewrite": {
          "type": "string"
        },
        "addHeaders": {
          "type": "string",
          "description": "String of values deliminated by a '|' character. This is the static HTTP\nheader you want inserted into the CDN response. Start value with \"append:\"\nor \"replace:\" which defines if Header will be replace or added. Default is\nappend."
        },
        "flowControl": {
          "$ref": "#/definitions/custconfOriginResponseModificationFlowControlEnumWrapperValue"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "clientRequestFilter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custconfRequestFilter"
          }
        },
        "originResponseFilter": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/custconfResponseFilter"
          }
        }
      }
    },
    "custconfOriginResponseModificationFlowControlEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "next",
        "break"
      ],
      "default": "UNKNOWN"
    },
    "custconfOriginResponseQueue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "scriptPath": {
          "type": "string",
          "description": "This is the path of the script on the CDN caching server."
        },
        "quitOnError": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This indicates the behavior of the caching server on script errors.  When\nselected, the caching server issues a 500 HTTP response code to an end user\nif a request failed to properly execute the script designated by this\npolicy.  If this option is unselected, the caching server ignores script\nerrors and continues processing the request."
        },
        "logLevel": {
          "$ref": "#/definitions/custconfOriginResponseQueueLogLevelEnumWrapperValue"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The script engine origin pull response queue policy allows you to register a\nPHP script to execute on the CDN caching server prior to the server proxying\nor caching the response from your origin.  Scripts defined in this queue can\nmodify, add, and/or delete HTTP headers on the response from your origin."
    },
    "custconfOriginResponseQueueLogLevelEnumWrapperValue": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "debug",
        "info",
        "warning",
        "error",
        "crit"
      ],
      "default": "UNKNOWN"
    },
    "custconfPathModification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "caseInsensitiveMatch": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "escapeSlashCharacter": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Whether or not to escape the slash character in the regular expression.\nTurn this off if you will escape this character yourself in the regular\nexpression below."
        },
        "header": {
          "type": "string",
          "description": "A regular expression that is matched against incoming request headers to\ndetermine which requests are targeted for rewriting. For example,\nUser-Agent: /(?=.*Opera)(?=.*Mobi).*|(.*Android.*)/i will match all Opera\nMobile and Android requests. To match all requests, put * here."
        },
        "includeQSParamInPath": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "regEx": {
          "type": "string",
          "description": "A regular expression pattern used to identify a portion of the path that is\ntargeted by this policy for replacement.  This should not include the\nbeginning and trailing '/' character.  All other '/' characters will be\nescaped by default."
        },
        "replacement": {
          "type": "string",
          "title": "The string used to replace the portion of the URL targeted by the search\npattern"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "Request URL rewriting policies can be used to modify the URL path of a CDN\nrequest.  This policy requires a custom script to be configured.\nThis policy requires the Script Engine service enabled on your account. If\nyou do not have this service enabled, please contact your sales\nrepresentative for more information."
    },
    "custconfPreserveRedirectHost": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "statusCodes": {
          "type": "number",
          "format": "int64",
          "description": "String of values deliminated by a ',' character. Comma separated list of\nredirect HTTP status codes to apply this policy. GFS only preserves the\nHost header if the status code of the origin response is listed."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      }
    },
    "custconfQueryStrParam": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "dispositionName": {
          "type": "string",
          "description": "This is the name of the query string parameter which contains the name of\nthe file to specify in the Content-Disposition HTTP response header.  This\nsetting is typically used by customers to configure a \"friendly name\" for\nURLs that have obfuscated file names.  This setting controls the \"filename\"\ndirective that is part of the Content-Disposition HTTP header."
        },
        "dispositionType": {
          "type": "string",
          "description": "This is the name of the query string parameter which contains the\ndisposition type to use in the Content-Disposition HTTP header.  Typically,\nthis value is set to \"attachment,” but you may supply a custom string\nusing this setting."
        },
        "dispositionOverride": {
          "type": "string",
          "description": "This setting allows you to completely override the Content-Disposition HTTP\nheader that the CDN caching servers use on a response."
        },
        "jumpToTimeStart": {
          "type": "string",
          "description": "This is the name of the query string parameter that indicates to the CDN\nthe start time offset of the video returned.  This parameter is part of the\njump-to-time feature that is initiated on a per request basis."
        },
        "jumpToTimeEnd": {
          "type": "string",
          "description": "This is the name of the query string parameter that indicates to the CDN\nthe end time offset of the video that should be returned.  This parameter\nis part of the jump-to-time feature that is initiated on a per request\nbasis."
        },
        "jumpToByteInitialBytes": {
          "type": "string",
          "description": "This is the  name of the query string parameter that indicates to the CDN\nthe initial bytes of a video that should be returned before sending the\nrequested byte offset.  This parameter is part of the jump-to-byte feature\nthat is initiated on a per request basis."
        },
        "jumpToByteStartOffset": {
          "type": "string",
          "description": "This is the name of the query string parameter that indicates to the CDN\nthe specific offset into the video that is being requested. This parameter\nis part of the jump-to-byte feature that is initiated on a per request\nbasis."
        },
        "rateLimitInitial": {
          "type": "string",
          "description": "This is the name of the query string parameter that indicates to the CDN an\ninitial burst rate to use when delivering a file.  This parameter is part\nof the bandwidth limiting feature that is initiated on a per request basis."
        },
        "rateLimitSustained": {
          "type": "string",
          "description": "This is the name of the query string parameter that indicates to the CDN\nthe sustained rate being requested for the delivery of a file.  This\nparameter is part of the bandwidth throttling feature that is initiated on\na per request basis."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The reserved query string parameters policy describes all the query string\nparameters the Highwinds CDN caching server reserves for special processing\nof your requests."
    },
    "custconfReceiptLogs": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Determines whether receipt access logging be enabled for this customer."
        }
      },
      "title": "Enable/disable delivery receipt access logs"
    },
    "custconfReceiptLogsConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "extraLogFields": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "title": "Delivery receipt log settings"
    },
    "custconfRedirectExceptions": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "redirectAgentCode": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. This is a comma separated\nlist of user agents and redirect code pairs.  The user agent and redirect\ncode values are separated by a colon (:), and you may use wildcards in the\nuser agent field.  For example, to map assign a 307 status code to all\nChrome browsers, you would specify: *chrome*:307."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The redirect response codes policy allows you to specify the HTTP redirect\nstatus code the CDN caching server should use when the CDN issues a redirect.\nUsing this policy, you can assign different redirect codes to user agents\nrequesting content."
    },
    "custconfRedirectMappings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "code": {
          "type": "number",
          "format": "int64",
          "description": "The HTTP cache response code that applies to this policy."
        },
        "redirectURL": {
          "type": "string",
          "description": "The URL that clients would be redirected to when applying this policy."
        },
        "replacementToken": {
          "type": "string",
          "description": "A token that will be replaced by the caching server with the URL of the\nrequest that triggered the policy.  This token can be positioned anywhere\nin the redirect URL."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The response code redirection policy allows you to map cache response codes\nto an HTTP redirect response.  When this policy is applied to a host, the\ncaching servers will redirect clients to the URL specified in this policy\ninstead of delivering the response code you mapped in the policy."
    },
    "custconfRequestFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "filterName": {
          "type": "string"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "urlFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "urlInput": {
          "$ref": "#/definitions/RequestFilterUrlInputEnumWrapperValue"
        },
        "popFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "regionFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfRequestReceipt": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "uriFormat": {
          "type": "string"
        },
        "headers": {
          "type": "string",
          "description": "String of values deliminated by a '|' character."
        },
        "maxAge": {
          "type": "number",
          "format": "int64",
          "description": "The receipt backlog TTL is the maximum age of a pending receipt. Receipts\nolder than the specified amount are dropped. A value of zero indicates that\nthe receipt does not expire and to only try delivering the receipt one time\nunless MaxRetry is defined."
        },
        "maxRetry": {
          "type": "number",
          "format": "int64",
          "description": "The retry count is the maximum number of times to retry the delivery of a\nsingle receipt before discarding it. This count is in addition to the\ninitial delivery attempt.  For example, a value of 3 means that a delivery\nedge will try to deliver a receipt up to 4 times.  NOTE: if a MaxAge is\nalso defined, then a receipt will be discarded if it expires before the\nmaximum number of retries has been reached."
        },
        "addIdToAccessLog": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "The add receipt identifier to access logs setting allows you to track\ndelivery receipts in your access logs. By enabling this, the CDN caching\nservers will add the X-HW-Receipt Header to each receipt's corresponding\nClient Request Access Log entry. This is not referring to the Receipt\nAccess Log entry. If this feature is enabled, the customer must have access\nlogging enabled (see the Customer conf type)."
        },
        "verifyCertificate": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "title": "Enable Cert Verification while doing SSL connection to Receipt Origin"
        },
        "certificateCN": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "clientResponseCodeFilter": {
          "type": "string",
          "title": "String of values deliminated by a ',' character. This is a pattern match\nexpression for each status code this policy applies to.  For example, 2*,\n3* applies this policy to all 200 and 300 level HTTP responses"
        },
        "clientResponseHeaderFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfRequestReceiptReportPercentage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "cacheHitReportPercentage": {
          "type": "integer",
          "format": "int32"
        },
        "originPullReportPercentage": {
          "type": "integer",
          "format": "int32"
        },
        "dedupReportPercentage": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The delivery receipts report percentage policy allows you to configure the\npercentage of requests to provide delivery confirmation receipts."
    },
    "custconfRequestReceiptServer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "host": {
          "type": "string"
        },
        "connectionTimeout": {
          "type": "number",
          "format": "int64"
        },
        "maxBatchSize": {
          "type": "number",
          "format": "int64"
        }
      }
    },
    "custconfResponseFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "filterName": {
          "type": "string"
        },
        "statusCodeFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. This is a pattern match\nexpression for each status code this policy applies to.  For example, 2*,\n3* applies this policy to all 200 and 300 level HTTP responses from your\norigin."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "popFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "regionFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfResponseHeader": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "http": {
          "type": "string",
          "title": "A pipe delimited list of rules that instructs the CDN caching servers to\ninclude a content-disposition header. The rules included in this setting\nmust be entered in the following format: Content-Disposition:\u003cUser\nAgent\u003e:\u003cfile extension 1\u003e, \u003cfile extension 2\u003e.  For example, to send the\nContent-Disposition header for all Mozilla browsers on the delivery of mp3,\nexe, tar, zip, gz and rar files, you would enter the following in the\nfield: Content-Disposition:Mozilla*:mp3,exe,tar,zip,gz,rar"
        },
        "enableETag": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "This gives the ability to disable the ETag header on the response."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The custom HTTP response headers policy allows you to specify a list of HTTP\nheaders you want the CDN caching servers to include in the response to\nclients."
    },
    "custconfRobotsTxt": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "file": {
          "type": "string",
          "format": "base64"
        },
        "cacheControlHeader": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfScriptNegCaching": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "statusCodes": {
          "type": "string",
          "description": "String of values deliminated by a ',' character. This is a comma separated\nlist of negative HTTP response codes to cache.  Wildcards, such as 4**, are\nsupported to represent all 400 level status codes."
        },
        "originHeaderOverride": {
          "type": "string",
          "title": "String of values deliminated by a '|' character. Pipe delimited ('|') list\nof headers to overwrite or insert in the origin response prior to the\nprocessing it on the caching server"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The legacy negative response code caching policy allowed the CDN to cache the\nbody of non-200 responses.  This policy is no longer required now that the\nCDN supports the caching of all response codes from an origin.  Please\nconsider removing this policy and configuring this behavior using a CDN\nCaching policy."
    },
    "custconfServerlessScripting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "scriptId": {
          "type": "string",
          "description": "This is the Id of the script to be loaded."
        },
        "processorAddress": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "regionFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "popFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "Serverless Script Processing is currently under development and will only be\nused in limited testing."
    },
    "custconfStaticHeader": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "clientRequest": {
          "type": "string",
          "description": "This is the static HTTP header you want inserted into the CDN request."
        },
        "http": {
          "type": "string",
          "description": "This is the static HTTP header you want inserted into the CDN response."
        },
        "originPull": {
          "type": "string",
          "description": "This is the HTTP header you want inserted into the origin pull request."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      },
      "description": "The static header injection policy allows you to insert headers into the CDN\nrequest and response processor."
    },
    "custconfStreamChunkedEncodingResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      }
    },
    "custconfTestPolicyOne": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "deprecatedByPolicy": {
          "type": "number",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      }
    },
    "custconfTestPolicyTwo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "supercedePolicy": {
          "type": "number",
          "format": "int64"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      }
    },
    "custconfTimePseudoStreaming": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "jumpToTimeStartParam": {
          "type": "string",
          "description": "The name of the query string parameter that indicates to the CDN the\nspecific time interval of the video that is being requested."
        },
        "jumpToTimeEndParam": {
          "type": "string",
          "description": "The name of the query string parameter that indicates to the CDN the end\ntime of the video that should be returned."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "The HTTP pseduo-streaming policy enables Flash based video players to support\nseeking to random locations within a MP4 or FLV file without having to\ndownload the entire video. Flash players such as Flowplayer and JWPlayer can\nbe configured to send a query string parameter that indicates to the server\nthe time offset the user advanced the video to. Typically a query string\nparamter called \"start\" is used by these players."
    },
    "custconfTossbackAlways": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Force the tossback of connections from the caching server to Doppler."
        }
      },
      "description": "Instructs the CDN caching server to always toss a connection back to Doppler\nto choose the edge for next pipeline request."
    },
    "custconfTossbackBypass": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Enables the bypass of BTP tossbacks between the caching server and Doppler."
        }
      },
      "description": "Instructs the CDN caching server to continue serving a pipeline request\nwithout tossing the connection back to Doppler."
    },
    "custconfVHost": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "domain": {
          "type": "string",
          "description": "This is the hostname you want to enable in this policy.  Note: You must\nconfigure your container's CNAME record with your DNS provider to enable\nthis hostname to deliver content."
        },
        "root": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "A hostname policy allows you to specify an alternate domain name that you\nwant to use to access content from your CDN container."
    },
    "custconfVaryHeaderField": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "valuesFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        }
      },
      "description": "Policy for configuring how the CDN handles a Vary field header delivered from\nan origin."
    },
    "custconfWaf": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "canonicalName": {
          "type": "string"
        },
        "failoverToOrigin": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "standAloneMode": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "popFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfWafClustersOverride": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "serverList": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "popFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "custconfXForwardedForBehavior": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "This is used by the API to perform conflict checking."
        },
        "followHttpSpec": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "enabled": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean"
        },
        "methodFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "pathFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        },
        "headerFilter": {
          "type": "string",
          "description": "String of values deliminated by a ',' character."
        }
      }
    },
    "paginationPageInfo": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "string",
          "title": "total_count is the total number of items in the dataset"
        },
        "hasPreviousPage": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "title": "has_previous_page will be true when a previous page of data exists"
        },
        "hasNextPage": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "title": "has_next_page will be true when another page of data is available"
        },
        "startCursor": {
          "type": "string",
          "title": "start_cursor will be the cursor for the first item in the set of data returned"
        },
        "endCursor": {
          "type": "string",
          "title": "end_cursor will be the cursor for the last item in the set of data returned"
        }
      },
      "description": "PageInfo provides information about a paginated response.\nThis is modeleted after the GraphQL Relay spec to support both cursor\nbased pagination and traditional offset based pagination."
    },
    "paginationPageRequest": {
      "type": "object",
      "properties": {
        "first": {
          "type": "string",
          "title": "first is the number of items desired"
        },
        "after": {
          "type": "string",
          "title": "after is the cursor value after which data will be returned"
        },
        "filter": {
          "type": "string",
          "title": "filter will accept sql style constraints"
        },
        "sortBy": {
          "type": "string",
          "title": "sort_by will sort the response by the given field"
        }
      },
      "description": "PageRequest is provided to a call which accepts paginated requests.\nThis is modeled after the GraphQL Relay spec to support both cursor\nbased pagination and traditional offset based pagination."
    },
    "schemacdnOrigin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Origin ID"
        },
        "path": {
          "type": "string",
          "title": "Path on the origin, defaults to /"
        },
        "hostname": {
          "type": "string",
          "title": "Origin hostname or IP address"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "title": "The port to connect to for non-encrypted connections"
        },
        "securePort": {
          "type": "integer",
          "format": "int32",
          "title": "The port to connect  to for encrypted connections"
        },
        "dedicated": {
          "type": "boolean",
          "x-omitempty": false,
          "format": "boolean",
          "description": "Whether or not the origin is dedicated for a site. Dedicated origins cannot be used by any site other than that which it is dedicated for."
        },
        "siteId": {
          "type": "string",
          "title": "The site the origin is dedicated for"
        }
      }
    },
    "stackpath.rpc.BadRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/apiStatusDetail"
        },
        {
          "type": "object",
          "properties": {
            "fieldViolations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/stackpath.rpc.BadRequest.FieldViolation"
              }
            }
          }
        }
      ]
    },
    "stackpath.rpc.BadRequest.FieldViolation": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "stackpath.rpc.Help": {
      "allOf": [
        {
          "$ref": "#/definitions/apiStatusDetail"
        },
        {
          "type": "object",
          "properties": {
            "links": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/stackpath.rpc.Help.Link"
              }
            }
          }
        }
      ]
    },
    "stackpath.rpc.Help.Link": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "stackpath.rpc.LocalizedMessage": {
      "allOf": [
        {
          "$ref": "#/definitions/apiStatusDetail"
        },
        {
          "type": "object",
          "properties": {
            "locale": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          }
        }
      ]
    },
    "stackpath.rpc.PreconditionFailure": {
      "allOf": [
        {
          "$ref": "#/definitions/apiStatusDetail"
        },
        {
          "type": "object",
          "properties": {
            "violations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/stackpath.rpc.PreconditionFailure.Violation"
              }
            }
          }
        }
      ]
    },
    "stackpath.rpc.PreconditionFailure.Violation": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "stackpath.rpc.QuotaFailure": {
      "allOf": [
        {
          "$ref": "#/definitions/apiStatusDetail"
        },
        {
          "type": "object",
          "properties": {
            "violations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/stackpath.rpc.QuotaFailure.Violation"
              }
            }
          }
        }
      ]
    },
    "stackpath.rpc.QuotaFailure.Violation": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "stackpath.rpc.RequestInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/apiStatusDetail"
        },
        {
          "type": "object",
          "properties": {
            "requestId": {
              "type": "string"
            },
            "servingData": {
              "type": "string"
            }
          }
        }
      ]
    },
    "stackpath.rpc.ResourceInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/apiStatusDetail"
        },
        {
          "type": "object",
          "properties": {
            "resourceType": {
              "type": "string"
            },
            "resourceName": {
              "type": "string"
            },
            "owner": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          }
        }
      ]
    },
    "stackpath.rpc.RetryInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/apiStatusDetail"
        },
        {
          "type": "object",
          "properties": {
            "retryDelay": {
              "type": "string"
            }
          }
        }
      ]
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "https://gateway.stackpath.com/identity/v1/oauth2/token"
    }
  },
  "security": [
    {
      "OAuth2": []
    }
  ]
}
